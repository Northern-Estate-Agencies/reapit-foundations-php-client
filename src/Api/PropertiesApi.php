<?php
/**
 * PropertiesApi
 * PHP version 7.3
 *
 * @category Class
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foundations Interactive API Explorer
 *
 * <p>Technical documentation for the Reapit Foundations REST API endpoints. This tool is interactive and provides instant access to data hosted in our <strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation#sandbox-mode\">sandbox environment</a> </strong>with <strong>authentication</strong> and <strong>versioning</strong> headers pre-populated. Example requests and responses are shown by default but you can switch to view a fully documented schema - look for the&nbsp;<strong>model</strong> link.</p> <p>* To begin developing with the platform, consult our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation\">documentation</a></strong>&nbsp;<br />* To report a bug or request a new feature, see our <strong><a href=\"https://developers.reapit.cloud/help\">help pages</a>&nbsp;<br /></strong>* For information on terminology, see our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/platform-glossary\">glossary</a></strong>&nbsp;<br />* Our APIs are located at&nbsp;<strong>https://platform.reapit.cloud<br /></strong>* The current API version is&nbsp;<strong>2020-01-31<br /></strong></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NorthernEstateAgencies\ReapitFoundationsClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NorthernEstateAgencies\ReapitFoundationsClient\ApiException;
use NorthernEstateAgencies\ReapitFoundationsClient\Configuration;
use NorthernEstateAgencies\ReapitFoundationsClient\HeaderSelector;
use NorthernEstateAgencies\ReapitFoundationsClient\ObjectSerializer;

/**
 * PropertiesApi Class Doc Comment
 *
 * @category Class
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PropertiesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCertificateById
     *
     * Gets a specific certificate by its&#39; unique identifier for a specific property
     *
     * @param  string $id Unique property identifier (required)
     * @param  string $certificateId Unique certificate identifier (required)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028Embedded
     */
    public function getCertificateById($id, $certificateId)
    {
        list($response) = $this->getCertificateByIdWithHttpInfo($id, $certificateId);
        return $response;
    }

    /**
     * Operation getCertificateByIdWithHttpInfo
     *
     * Gets a specific certificate by its&#39; unique identifier for a specific property
     *
     * @param  string $id Unique property identifier (required)
     * @param  string $certificateId Unique certificate identifier (required)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028Embedded, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCertificateByIdWithHttpInfo($id, $certificateId)
    {
        $request = $this->getCertificateByIdRequest($id, $certificateId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028Embedded' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028Embedded', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028Embedded';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028Embedded',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCertificateByIdAsync
     *
     * Gets a specific certificate by its&#39; unique identifier for a specific property
     *
     * @param  string $id Unique property identifier (required)
     * @param  string $certificateId Unique certificate identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCertificateByIdAsync($id, $certificateId)
    {
        return $this->getCertificateByIdAsyncWithHttpInfo($id, $certificateId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCertificateByIdAsyncWithHttpInfo
     *
     * Gets a specific certificate by its&#39; unique identifier for a specific property
     *
     * @param  string $id Unique property identifier (required)
     * @param  string $certificateId Unique certificate identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCertificateByIdAsyncWithHttpInfo($id, $certificateId)
    {
        $returnType = '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028Embedded';
        $request = $this->getCertificateByIdRequest($id, $certificateId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCertificateById'
     *
     * @param  string $id Unique property identifier (required)
     * @param  string $certificateId Unique certificate identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCertificateByIdRequest($id, $certificateId)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCertificateById'
            );
        }
        // verify the required parameter 'certificateId' is set
        if ($certificateId === null || (is_array($certificateId) && count($certificateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $certificateId when calling getCertificateById'
            );
        }

        $resourcePath = '/properties/{id}/certificates/{certificateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($certificateId !== null) {
            $resourcePath = str_replace(
                '{' . 'certificateId' . '}',
                ObjectSerializer::toPathValue($certificateId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyById
     *
     * Gets a single property by its&#39; unique identifier
     *
     * @param  string $id Unique property identifier (required)
     * @param  string[] $embed Embed additional resources into the property returned (optional)
     * @param  string[] $extrasField Include extras fields matching one or more field names specified. You must be granted access to this data beforehand (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027Embedded
     */
    public function getPropertyById($id, $embed = null, $extrasField = null)
    {
        list($response) = $this->getPropertyByIdWithHttpInfo($id, $embed, $extrasField);
        return $response;
    }

    /**
     * Operation getPropertyByIdWithHttpInfo
     *
     * Gets a single property by its&#39; unique identifier
     *
     * @param  string $id Unique property identifier (required)
     * @param  string[] $embed Embed additional resources into the property returned (optional)
     * @param  string[] $extrasField Include extras fields matching one or more field names specified. You must be granted access to this data beforehand (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027Embedded, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyByIdWithHttpInfo($id, $embed = null, $extrasField = null)
    {
        $request = $this->getPropertyByIdRequest($id, $embed, $extrasField);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027Embedded' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027Embedded', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027Embedded';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027Embedded',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyByIdAsync
     *
     * Gets a single property by its&#39; unique identifier
     *
     * @param  string $id Unique property identifier (required)
     * @param  string[] $embed Embed additional resources into the property returned (optional)
     * @param  string[] $extrasField Include extras fields matching one or more field names specified. You must be granted access to this data beforehand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyByIdAsync($id, $embed = null, $extrasField = null)
    {
        return $this->getPropertyByIdAsyncWithHttpInfo($id, $embed, $extrasField)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyByIdAsyncWithHttpInfo
     *
     * Gets a single property by its&#39; unique identifier
     *
     * @param  string $id Unique property identifier (required)
     * @param  string[] $embed Embed additional resources into the property returned (optional)
     * @param  string[] $extrasField Include extras fields matching one or more field names specified. You must be granted access to this data beforehand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyByIdAsyncWithHttpInfo($id, $embed = null, $extrasField = null)
    {
        $returnType = '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027Embedded';
        $request = $this->getPropertyByIdRequest($id, $embed, $extrasField);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyById'
     *
     * @param  string $id Unique property identifier (required)
     * @param  string[] $embed Embed additional resources into the property returned (optional)
     * @param  string[] $extrasField Include extras fields matching one or more field names specified. You must be granted access to this data beforehand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyByIdRequest($id, $embed = null, $extrasField = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPropertyById'
            );
        }



        $resourcePath = '/properties/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($embed !== null) {
            if('form' === 'form' && is_array($embed)) {
                foreach($embed as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['embed'] = $embed;
            }
        }
        // query params
        if ($extrasField !== null) {
            if('form' === 'form' && is_array($extrasField)) {
                foreach($extrasField as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['extrasField'] = $extrasField;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertiesGet
     *
     * Gets a collection of properties
     *
     * @param  int $pageSize A limit on the number of properties to be returned per page. Value can range between 1 and 100, and the default is 25 (optional)
     * @param  int $pageNumber The page number to return (must be greater than 0) (optional)
     * @param  string $sortBy Sort results by the value specified. Prefix string with &#39;-&#39; to indicate descending direction (created/modified/address/bedrooms/negotiatorId/officeId/price/rent) (optional)
     * @param  string[] $embed Embed additional resources into the properties returned (optional)
     * @param  string[] $id Only return properties where the &#x60;id&#x60; field matches one or more values provided (optional)
     * @param  string[] $age Only return properties where the &#x60;age&#x60; field contains one or more values provided (optional)
     * @param  string[] $agentRole Only return properties where the &#x60;letting.agentRole&#x60; field matches one or more values provided (optional)
     * @param  string[] $landlordId Only return properties where the &#x60;landlordId&#x60; field matches one or more values provided (optional)
     * @param  string[] $lettingStatus Only return properties where the &#x60;lettingStatus&#x60; field matches one or more values provided (optional)
     * @param  string[] $locality Only return properties where the &#x60;locality&#x60; field contains one or more values provided (optional)
     * @param  string[] $marketingMode Only return properties where the &#x60;marketingMode&#x60; field matches one or more values provided. Note that querying for single marketing mode properties (eg &#x60;selling&#x60;) will also return properties that are marketed in both modes (&#x60;selling&#x60; AND &#x60;sellingAndLetting&#x60;) (optional)
     * @param  string[] $masterId Only return properties where the master property id matches one or more values provided. (optional)
     * @param  string[] $officeId Only return properties where the &#x60;officeIds&#x60; matches one or more values provided. (optional)
     * @param  string[] $parking Only return properties where the &#x60;parking&#x60; field contains one or more values provided (optional)
     * @param  string[] $sellingStatus Only return properties where the &#x60;sellingStatus&#x60; field matches or more values provided (optional)
     * @param  string[] $situation Only return properties where the &#x60;garden&#x60; field contains one or more values provided (optional)
     * @param  string[] $style Only return properties where the &#x60;style&#x60; field contains one or more values provided (optional)
     * @param  string[] $type Only return properties where the &#x60;type&#x60; field contains one or more values provided (optional)
     * @param  string $address Only return properties where the &#x60;address&#x60; field matches the value provided (optional)
     * @param  string $departmentId Only return properties where the &#x60;departmentId&#x60; field matches the value provided (optional)
     * @param  int $bedroomsFrom Only return properties where the &#x60;bedrooms&#x60; field is more than or equal to the value provided (optional)
     * @param  int $bedroomsTo Only return properties where the &#x60;bedrooms&#x60; field is less than or equal to the value provided (optional)
     * @param  int $priceFrom Only return properties where the &#x60;selling.price&#x60; field is more than or equal to the value provided (optional)
     * @param  int $priceTo Only return properties where the &#x60;selling.price&#x60; field is less than or equal to the value provided (optional)
     * @param  double $rentFrom Only return properties where the &#x60;letting.rent&#x60; field is more than or equal to the value provided (optional)
     * @param  double $rentTo Only return properties where the &#x60;letting.rent&#x60; field is less than or equal to the value provided (optional)
     * @param  string[] $rentFrequency The rent collection frequency that &#39;rentFrom&#39; and &#39;rentTo&#39; parameters are in relation to. Defaults to monthly. (optional)
     * @param  bool $internetAdvertising Only return properties where the &#x60;internetAdvertising&#x60; field matches the value provided (optional)
     * @param  bool $fromArchive Only return properties where the &#x60;fromArchive&#x60; field matches the value given (optional)
     * @param  \DateTime $createdFrom Only return properties where the &#x60;created&#x60; field is on or after the ISO8601 date and time value provided (optional)
     * @param  \DateTime $createdTo Only return properties where the &#x60;created&#x60; field is on or before the ISO8601 date and time value provided (optional)
     * @param  \DateTime $modifiedFrom Only return properties which have been modified/created since the given ISO8601 date and time provided. (optional)
     * @param  \DateTime $modifiedTo Only return properties which have been modified/created before the given ISO8601 date and time provided. (optional)
     * @param  string[] $metadata Only return properties where the metadata matches the filters given (optional)
     * @param  string[] $extrasField Include extras fields matching one or more field names specified. You must be granted access to this data beforehand (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027
     */
    public function propertiesGet($pageSize = null, $pageNumber = null, $sortBy = null, $embed = null, $id = null, $age = null, $agentRole = null, $landlordId = null, $lettingStatus = null, $locality = null, $marketingMode = null, $masterId = null, $officeId = null, $parking = null, $sellingStatus = null, $situation = null, $style = null, $type = null, $address = null, $departmentId = null, $bedroomsFrom = null, $bedroomsTo = null, $priceFrom = null, $priceTo = null, $rentFrom = null, $rentTo = null, $rentFrequency = null, $internetAdvertising = null, $fromArchive = null, $createdFrom = null, $createdTo = null, $modifiedFrom = null, $modifiedTo = null, $metadata = null, $extrasField = null)
    {
        list($response) = $this->propertiesGetWithHttpInfo($pageSize, $pageNumber, $sortBy, $embed, $id, $age, $agentRole, $landlordId, $lettingStatus, $locality, $marketingMode, $masterId, $officeId, $parking, $sellingStatus, $situation, $style, $type, $address, $departmentId, $bedroomsFrom, $bedroomsTo, $priceFrom, $priceTo, $rentFrom, $rentTo, $rentFrequency, $internetAdvertising, $fromArchive, $createdFrom, $createdTo, $modifiedFrom, $modifiedTo, $metadata, $extrasField);
        return $response;
    }

    /**
     * Operation propertiesGetWithHttpInfo
     *
     * Gets a collection of properties
     *
     * @param  int $pageSize A limit on the number of properties to be returned per page. Value can range between 1 and 100, and the default is 25 (optional)
     * @param  int $pageNumber The page number to return (must be greater than 0) (optional)
     * @param  string $sortBy Sort results by the value specified. Prefix string with &#39;-&#39; to indicate descending direction (created/modified/address/bedrooms/negotiatorId/officeId/price/rent) (optional)
     * @param  string[] $embed Embed additional resources into the properties returned (optional)
     * @param  string[] $id Only return properties where the &#x60;id&#x60; field matches one or more values provided (optional)
     * @param  string[] $age Only return properties where the &#x60;age&#x60; field contains one or more values provided (optional)
     * @param  string[] $agentRole Only return properties where the &#x60;letting.agentRole&#x60; field matches one or more values provided (optional)
     * @param  string[] $landlordId Only return properties where the &#x60;landlordId&#x60; field matches one or more values provided (optional)
     * @param  string[] $lettingStatus Only return properties where the &#x60;lettingStatus&#x60; field matches one or more values provided (optional)
     * @param  string[] $locality Only return properties where the &#x60;locality&#x60; field contains one or more values provided (optional)
     * @param  string[] $marketingMode Only return properties where the &#x60;marketingMode&#x60; field matches one or more values provided. Note that querying for single marketing mode properties (eg &#x60;selling&#x60;) will also return properties that are marketed in both modes (&#x60;selling&#x60; AND &#x60;sellingAndLetting&#x60;) (optional)
     * @param  string[] $masterId Only return properties where the master property id matches one or more values provided. (optional)
     * @param  string[] $officeId Only return properties where the &#x60;officeIds&#x60; matches one or more values provided. (optional)
     * @param  string[] $parking Only return properties where the &#x60;parking&#x60; field contains one or more values provided (optional)
     * @param  string[] $sellingStatus Only return properties where the &#x60;sellingStatus&#x60; field matches or more values provided (optional)
     * @param  string[] $situation Only return properties where the &#x60;garden&#x60; field contains one or more values provided (optional)
     * @param  string[] $style Only return properties where the &#x60;style&#x60; field contains one or more values provided (optional)
     * @param  string[] $type Only return properties where the &#x60;type&#x60; field contains one or more values provided (optional)
     * @param  string $address Only return properties where the &#x60;address&#x60; field matches the value provided (optional)
     * @param  string $departmentId Only return properties where the &#x60;departmentId&#x60; field matches the value provided (optional)
     * @param  int $bedroomsFrom Only return properties where the &#x60;bedrooms&#x60; field is more than or equal to the value provided (optional)
     * @param  int $bedroomsTo Only return properties where the &#x60;bedrooms&#x60; field is less than or equal to the value provided (optional)
     * @param  int $priceFrom Only return properties where the &#x60;selling.price&#x60; field is more than or equal to the value provided (optional)
     * @param  int $priceTo Only return properties where the &#x60;selling.price&#x60; field is less than or equal to the value provided (optional)
     * @param  double $rentFrom Only return properties where the &#x60;letting.rent&#x60; field is more than or equal to the value provided (optional)
     * @param  double $rentTo Only return properties where the &#x60;letting.rent&#x60; field is less than or equal to the value provided (optional)
     * @param  string[] $rentFrequency The rent collection frequency that &#39;rentFrom&#39; and &#39;rentTo&#39; parameters are in relation to. Defaults to monthly. (optional)
     * @param  bool $internetAdvertising Only return properties where the &#x60;internetAdvertising&#x60; field matches the value provided (optional)
     * @param  bool $fromArchive Only return properties where the &#x60;fromArchive&#x60; field matches the value given (optional)
     * @param  \DateTime $createdFrom Only return properties where the &#x60;created&#x60; field is on or after the ISO8601 date and time value provided (optional)
     * @param  \DateTime $createdTo Only return properties where the &#x60;created&#x60; field is on or before the ISO8601 date and time value provided (optional)
     * @param  \DateTime $modifiedFrom Only return properties which have been modified/created since the given ISO8601 date and time provided. (optional)
     * @param  \DateTime $modifiedTo Only return properties which have been modified/created before the given ISO8601 date and time provided. (optional)
     * @param  string[] $metadata Only return properties where the metadata matches the filters given (optional)
     * @param  string[] $extrasField Include extras fields matching one or more field names specified. You must be granted access to this data beforehand (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertiesGetWithHttpInfo($pageSize = null, $pageNumber = null, $sortBy = null, $embed = null, $id = null, $age = null, $agentRole = null, $landlordId = null, $lettingStatus = null, $locality = null, $marketingMode = null, $masterId = null, $officeId = null, $parking = null, $sellingStatus = null, $situation = null, $style = null, $type = null, $address = null, $departmentId = null, $bedroomsFrom = null, $bedroomsTo = null, $priceFrom = null, $priceTo = null, $rentFrom = null, $rentTo = null, $rentFrequency = null, $internetAdvertising = null, $fromArchive = null, $createdFrom = null, $createdTo = null, $modifiedFrom = null, $modifiedTo = null, $metadata = null, $extrasField = null)
    {
        $request = $this->propertiesGetRequest($pageSize, $pageNumber, $sortBy, $embed, $id, $age, $agentRole, $landlordId, $lettingStatus, $locality, $marketingMode, $masterId, $officeId, $parking, $sellingStatus, $situation, $style, $type, $address, $departmentId, $bedroomsFrom, $bedroomsTo, $priceFrom, $priceTo, $rentFrom, $rentTo, $rentFrequency, $internetAdvertising, $fromArchive, $createdFrom, $createdTo, $modifiedFrom, $modifiedTo, $metadata, $extrasField);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation propertiesGetAsync
     *
     * Gets a collection of properties
     *
     * @param  int $pageSize A limit on the number of properties to be returned per page. Value can range between 1 and 100, and the default is 25 (optional)
     * @param  int $pageNumber The page number to return (must be greater than 0) (optional)
     * @param  string $sortBy Sort results by the value specified. Prefix string with &#39;-&#39; to indicate descending direction (created/modified/address/bedrooms/negotiatorId/officeId/price/rent) (optional)
     * @param  string[] $embed Embed additional resources into the properties returned (optional)
     * @param  string[] $id Only return properties where the &#x60;id&#x60; field matches one or more values provided (optional)
     * @param  string[] $age Only return properties where the &#x60;age&#x60; field contains one or more values provided (optional)
     * @param  string[] $agentRole Only return properties where the &#x60;letting.agentRole&#x60; field matches one or more values provided (optional)
     * @param  string[] $landlordId Only return properties where the &#x60;landlordId&#x60; field matches one or more values provided (optional)
     * @param  string[] $lettingStatus Only return properties where the &#x60;lettingStatus&#x60; field matches one or more values provided (optional)
     * @param  string[] $locality Only return properties where the &#x60;locality&#x60; field contains one or more values provided (optional)
     * @param  string[] $marketingMode Only return properties where the &#x60;marketingMode&#x60; field matches one or more values provided. Note that querying for single marketing mode properties (eg &#x60;selling&#x60;) will also return properties that are marketed in both modes (&#x60;selling&#x60; AND &#x60;sellingAndLetting&#x60;) (optional)
     * @param  string[] $masterId Only return properties where the master property id matches one or more values provided. (optional)
     * @param  string[] $officeId Only return properties where the &#x60;officeIds&#x60; matches one or more values provided. (optional)
     * @param  string[] $parking Only return properties where the &#x60;parking&#x60; field contains one or more values provided (optional)
     * @param  string[] $sellingStatus Only return properties where the &#x60;sellingStatus&#x60; field matches or more values provided (optional)
     * @param  string[] $situation Only return properties where the &#x60;garden&#x60; field contains one or more values provided (optional)
     * @param  string[] $style Only return properties where the &#x60;style&#x60; field contains one or more values provided (optional)
     * @param  string[] $type Only return properties where the &#x60;type&#x60; field contains one or more values provided (optional)
     * @param  string $address Only return properties where the &#x60;address&#x60; field matches the value provided (optional)
     * @param  string $departmentId Only return properties where the &#x60;departmentId&#x60; field matches the value provided (optional)
     * @param  int $bedroomsFrom Only return properties where the &#x60;bedrooms&#x60; field is more than or equal to the value provided (optional)
     * @param  int $bedroomsTo Only return properties where the &#x60;bedrooms&#x60; field is less than or equal to the value provided (optional)
     * @param  int $priceFrom Only return properties where the &#x60;selling.price&#x60; field is more than or equal to the value provided (optional)
     * @param  int $priceTo Only return properties where the &#x60;selling.price&#x60; field is less than or equal to the value provided (optional)
     * @param  double $rentFrom Only return properties where the &#x60;letting.rent&#x60; field is more than or equal to the value provided (optional)
     * @param  double $rentTo Only return properties where the &#x60;letting.rent&#x60; field is less than or equal to the value provided (optional)
     * @param  string[] $rentFrequency The rent collection frequency that &#39;rentFrom&#39; and &#39;rentTo&#39; parameters are in relation to. Defaults to monthly. (optional)
     * @param  bool $internetAdvertising Only return properties where the &#x60;internetAdvertising&#x60; field matches the value provided (optional)
     * @param  bool $fromArchive Only return properties where the &#x60;fromArchive&#x60; field matches the value given (optional)
     * @param  \DateTime $createdFrom Only return properties where the &#x60;created&#x60; field is on or after the ISO8601 date and time value provided (optional)
     * @param  \DateTime $createdTo Only return properties where the &#x60;created&#x60; field is on or before the ISO8601 date and time value provided (optional)
     * @param  \DateTime $modifiedFrom Only return properties which have been modified/created since the given ISO8601 date and time provided. (optional)
     * @param  \DateTime $modifiedTo Only return properties which have been modified/created before the given ISO8601 date and time provided. (optional)
     * @param  string[] $metadata Only return properties where the metadata matches the filters given (optional)
     * @param  string[] $extrasField Include extras fields matching one or more field names specified. You must be granted access to this data beforehand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesGetAsync($pageSize = null, $pageNumber = null, $sortBy = null, $embed = null, $id = null, $age = null, $agentRole = null, $landlordId = null, $lettingStatus = null, $locality = null, $marketingMode = null, $masterId = null, $officeId = null, $parking = null, $sellingStatus = null, $situation = null, $style = null, $type = null, $address = null, $departmentId = null, $bedroomsFrom = null, $bedroomsTo = null, $priceFrom = null, $priceTo = null, $rentFrom = null, $rentTo = null, $rentFrequency = null, $internetAdvertising = null, $fromArchive = null, $createdFrom = null, $createdTo = null, $modifiedFrom = null, $modifiedTo = null, $metadata = null, $extrasField = null)
    {
        return $this->propertiesGetAsyncWithHttpInfo($pageSize, $pageNumber, $sortBy, $embed, $id, $age, $agentRole, $landlordId, $lettingStatus, $locality, $marketingMode, $masterId, $officeId, $parking, $sellingStatus, $situation, $style, $type, $address, $departmentId, $bedroomsFrom, $bedroomsTo, $priceFrom, $priceTo, $rentFrom, $rentTo, $rentFrequency, $internetAdvertising, $fromArchive, $createdFrom, $createdTo, $modifiedFrom, $modifiedTo, $metadata, $extrasField)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertiesGetAsyncWithHttpInfo
     *
     * Gets a collection of properties
     *
     * @param  int $pageSize A limit on the number of properties to be returned per page. Value can range between 1 and 100, and the default is 25 (optional)
     * @param  int $pageNumber The page number to return (must be greater than 0) (optional)
     * @param  string $sortBy Sort results by the value specified. Prefix string with &#39;-&#39; to indicate descending direction (created/modified/address/bedrooms/negotiatorId/officeId/price/rent) (optional)
     * @param  string[] $embed Embed additional resources into the properties returned (optional)
     * @param  string[] $id Only return properties where the &#x60;id&#x60; field matches one or more values provided (optional)
     * @param  string[] $age Only return properties where the &#x60;age&#x60; field contains one or more values provided (optional)
     * @param  string[] $agentRole Only return properties where the &#x60;letting.agentRole&#x60; field matches one or more values provided (optional)
     * @param  string[] $landlordId Only return properties where the &#x60;landlordId&#x60; field matches one or more values provided (optional)
     * @param  string[] $lettingStatus Only return properties where the &#x60;lettingStatus&#x60; field matches one or more values provided (optional)
     * @param  string[] $locality Only return properties where the &#x60;locality&#x60; field contains one or more values provided (optional)
     * @param  string[] $marketingMode Only return properties where the &#x60;marketingMode&#x60; field matches one or more values provided. Note that querying for single marketing mode properties (eg &#x60;selling&#x60;) will also return properties that are marketed in both modes (&#x60;selling&#x60; AND &#x60;sellingAndLetting&#x60;) (optional)
     * @param  string[] $masterId Only return properties where the master property id matches one or more values provided. (optional)
     * @param  string[] $officeId Only return properties where the &#x60;officeIds&#x60; matches one or more values provided. (optional)
     * @param  string[] $parking Only return properties where the &#x60;parking&#x60; field contains one or more values provided (optional)
     * @param  string[] $sellingStatus Only return properties where the &#x60;sellingStatus&#x60; field matches or more values provided (optional)
     * @param  string[] $situation Only return properties where the &#x60;garden&#x60; field contains one or more values provided (optional)
     * @param  string[] $style Only return properties where the &#x60;style&#x60; field contains one or more values provided (optional)
     * @param  string[] $type Only return properties where the &#x60;type&#x60; field contains one or more values provided (optional)
     * @param  string $address Only return properties where the &#x60;address&#x60; field matches the value provided (optional)
     * @param  string $departmentId Only return properties where the &#x60;departmentId&#x60; field matches the value provided (optional)
     * @param  int $bedroomsFrom Only return properties where the &#x60;bedrooms&#x60; field is more than or equal to the value provided (optional)
     * @param  int $bedroomsTo Only return properties where the &#x60;bedrooms&#x60; field is less than or equal to the value provided (optional)
     * @param  int $priceFrom Only return properties where the &#x60;selling.price&#x60; field is more than or equal to the value provided (optional)
     * @param  int $priceTo Only return properties where the &#x60;selling.price&#x60; field is less than or equal to the value provided (optional)
     * @param  double $rentFrom Only return properties where the &#x60;letting.rent&#x60; field is more than or equal to the value provided (optional)
     * @param  double $rentTo Only return properties where the &#x60;letting.rent&#x60; field is less than or equal to the value provided (optional)
     * @param  string[] $rentFrequency The rent collection frequency that &#39;rentFrom&#39; and &#39;rentTo&#39; parameters are in relation to. Defaults to monthly. (optional)
     * @param  bool $internetAdvertising Only return properties where the &#x60;internetAdvertising&#x60; field matches the value provided (optional)
     * @param  bool $fromArchive Only return properties where the &#x60;fromArchive&#x60; field matches the value given (optional)
     * @param  \DateTime $createdFrom Only return properties where the &#x60;created&#x60; field is on or after the ISO8601 date and time value provided (optional)
     * @param  \DateTime $createdTo Only return properties where the &#x60;created&#x60; field is on or before the ISO8601 date and time value provided (optional)
     * @param  \DateTime $modifiedFrom Only return properties which have been modified/created since the given ISO8601 date and time provided. (optional)
     * @param  \DateTime $modifiedTo Only return properties which have been modified/created before the given ISO8601 date and time provided. (optional)
     * @param  string[] $metadata Only return properties where the metadata matches the filters given (optional)
     * @param  string[] $extrasField Include extras fields matching one or more field names specified. You must be granted access to this data beforehand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesGetAsyncWithHttpInfo($pageSize = null, $pageNumber = null, $sortBy = null, $embed = null, $id = null, $age = null, $agentRole = null, $landlordId = null, $lettingStatus = null, $locality = null, $marketingMode = null, $masterId = null, $officeId = null, $parking = null, $sellingStatus = null, $situation = null, $style = null, $type = null, $address = null, $departmentId = null, $bedroomsFrom = null, $bedroomsTo = null, $priceFrom = null, $priceTo = null, $rentFrom = null, $rentTo = null, $rentFrequency = null, $internetAdvertising = null, $fromArchive = null, $createdFrom = null, $createdTo = null, $modifiedFrom = null, $modifiedTo = null, $metadata = null, $extrasField = null)
    {
        $returnType = '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20027';
        $request = $this->propertiesGetRequest($pageSize, $pageNumber, $sortBy, $embed, $id, $age, $agentRole, $landlordId, $lettingStatus, $locality, $marketingMode, $masterId, $officeId, $parking, $sellingStatus, $situation, $style, $type, $address, $departmentId, $bedroomsFrom, $bedroomsTo, $priceFrom, $priceTo, $rentFrom, $rentTo, $rentFrequency, $internetAdvertising, $fromArchive, $createdFrom, $createdTo, $modifiedFrom, $modifiedTo, $metadata, $extrasField);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertiesGet'
     *
     * @param  int $pageSize A limit on the number of properties to be returned per page. Value can range between 1 and 100, and the default is 25 (optional)
     * @param  int $pageNumber The page number to return (must be greater than 0) (optional)
     * @param  string $sortBy Sort results by the value specified. Prefix string with &#39;-&#39; to indicate descending direction (created/modified/address/bedrooms/negotiatorId/officeId/price/rent) (optional)
     * @param  string[] $embed Embed additional resources into the properties returned (optional)
     * @param  string[] $id Only return properties where the &#x60;id&#x60; field matches one or more values provided (optional)
     * @param  string[] $age Only return properties where the &#x60;age&#x60; field contains one or more values provided (optional)
     * @param  string[] $agentRole Only return properties where the &#x60;letting.agentRole&#x60; field matches one or more values provided (optional)
     * @param  string[] $landlordId Only return properties where the &#x60;landlordId&#x60; field matches one or more values provided (optional)
     * @param  string[] $lettingStatus Only return properties where the &#x60;lettingStatus&#x60; field matches one or more values provided (optional)
     * @param  string[] $locality Only return properties where the &#x60;locality&#x60; field contains one or more values provided (optional)
     * @param  string[] $marketingMode Only return properties where the &#x60;marketingMode&#x60; field matches one or more values provided. Note that querying for single marketing mode properties (eg &#x60;selling&#x60;) will also return properties that are marketed in both modes (&#x60;selling&#x60; AND &#x60;sellingAndLetting&#x60;) (optional)
     * @param  string[] $masterId Only return properties where the master property id matches one or more values provided. (optional)
     * @param  string[] $officeId Only return properties where the &#x60;officeIds&#x60; matches one or more values provided. (optional)
     * @param  string[] $parking Only return properties where the &#x60;parking&#x60; field contains one or more values provided (optional)
     * @param  string[] $sellingStatus Only return properties where the &#x60;sellingStatus&#x60; field matches or more values provided (optional)
     * @param  string[] $situation Only return properties where the &#x60;garden&#x60; field contains one or more values provided (optional)
     * @param  string[] $style Only return properties where the &#x60;style&#x60; field contains one or more values provided (optional)
     * @param  string[] $type Only return properties where the &#x60;type&#x60; field contains one or more values provided (optional)
     * @param  string $address Only return properties where the &#x60;address&#x60; field matches the value provided (optional)
     * @param  string $departmentId Only return properties where the &#x60;departmentId&#x60; field matches the value provided (optional)
     * @param  int $bedroomsFrom Only return properties where the &#x60;bedrooms&#x60; field is more than or equal to the value provided (optional)
     * @param  int $bedroomsTo Only return properties where the &#x60;bedrooms&#x60; field is less than or equal to the value provided (optional)
     * @param  int $priceFrom Only return properties where the &#x60;selling.price&#x60; field is more than or equal to the value provided (optional)
     * @param  int $priceTo Only return properties where the &#x60;selling.price&#x60; field is less than or equal to the value provided (optional)
     * @param  double $rentFrom Only return properties where the &#x60;letting.rent&#x60; field is more than or equal to the value provided (optional)
     * @param  double $rentTo Only return properties where the &#x60;letting.rent&#x60; field is less than or equal to the value provided (optional)
     * @param  string[] $rentFrequency The rent collection frequency that &#39;rentFrom&#39; and &#39;rentTo&#39; parameters are in relation to. Defaults to monthly. (optional)
     * @param  bool $internetAdvertising Only return properties where the &#x60;internetAdvertising&#x60; field matches the value provided (optional)
     * @param  bool $fromArchive Only return properties where the &#x60;fromArchive&#x60; field matches the value given (optional)
     * @param  \DateTime $createdFrom Only return properties where the &#x60;created&#x60; field is on or after the ISO8601 date and time value provided (optional)
     * @param  \DateTime $createdTo Only return properties where the &#x60;created&#x60; field is on or before the ISO8601 date and time value provided (optional)
     * @param  \DateTime $modifiedFrom Only return properties which have been modified/created since the given ISO8601 date and time provided. (optional)
     * @param  \DateTime $modifiedTo Only return properties which have been modified/created before the given ISO8601 date and time provided. (optional)
     * @param  string[] $metadata Only return properties where the metadata matches the filters given (optional)
     * @param  string[] $extrasField Include extras fields matching one or more field names specified. You must be granted access to this data beforehand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function propertiesGetRequest($pageSize = null, $pageNumber = null, $sortBy = null, $embed = null, $id = null, $age = null, $agentRole = null, $landlordId = null, $lettingStatus = null, $locality = null, $marketingMode = null, $masterId = null, $officeId = null, $parking = null, $sellingStatus = null, $situation = null, $style = null, $type = null, $address = null, $departmentId = null, $bedroomsFrom = null, $bedroomsTo = null, $priceFrom = null, $priceTo = null, $rentFrom = null, $rentTo = null, $rentFrequency = null, $internetAdvertising = null, $fromArchive = null, $createdFrom = null, $createdTo = null, $modifiedFrom = null, $modifiedTo = null, $metadata = null, $extrasField = null)
    {



















        $resourcePath = '/properties/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($pageNumber)) {
            $pageNumber = ObjectSerializer::serializeCollection($pageNumber, '', true);
        }
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = $pageNumber;
        }
        // query params
        if (is_array($sortBy)) {
            $sortBy = ObjectSerializer::serializeCollection($sortBy, '', true);
        }
        if ($sortBy !== null) {
            $queryParams['sortBy'] = $sortBy;
        }
        // query params
        if ($embed !== null) {
            if('form' === 'form' && is_array($embed)) {
                foreach($embed as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['embed'] = $embed;
            }
        }
        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($age !== null) {
            if('form' === 'form' && is_array($age)) {
                foreach($age as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['age'] = $age;
            }
        }
        // query params
        if ($agentRole !== null) {
            if('form' === 'form' && is_array($agentRole)) {
                foreach($agentRole as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['agentRole'] = $agentRole;
            }
        }
        // query params
        if ($landlordId !== null) {
            if('form' === 'form' && is_array($landlordId)) {
                foreach($landlordId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['landlordId'] = $landlordId;
            }
        }
        // query params
        if ($lettingStatus !== null) {
            if('form' === 'form' && is_array($lettingStatus)) {
                foreach($lettingStatus as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['lettingStatus'] = $lettingStatus;
            }
        }
        // query params
        if ($locality !== null) {
            if('form' === 'form' && is_array($locality)) {
                foreach($locality as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locality'] = $locality;
            }
        }
        // query params
        if ($marketingMode !== null) {
            if('form' === 'form' && is_array($marketingMode)) {
                foreach($marketingMode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['marketingMode'] = $marketingMode;
            }
        }
        // query params
        if ($masterId !== null) {
            if('form' === 'form' && is_array($masterId)) {
                foreach($masterId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['masterId'] = $masterId;
            }
        }
        // query params
        if ($officeId !== null) {
            if('form' === 'form' && is_array($officeId)) {
                foreach($officeId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['officeId'] = $officeId;
            }
        }
        // query params
        if ($parking !== null) {
            if('form' === 'form' && is_array($parking)) {
                foreach($parking as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['parking'] = $parking;
            }
        }
        // query params
        if ($sellingStatus !== null) {
            if('form' === 'form' && is_array($sellingStatus)) {
                foreach($sellingStatus as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sellingStatus'] = $sellingStatus;
            }
        }
        // query params
        if ($situation !== null) {
            if('form' === 'form' && is_array($situation)) {
                foreach($situation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['situation'] = $situation;
            }
        }
        // query params
        if ($style !== null) {
            if('form' === 'form' && is_array($style)) {
                foreach($style as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['style'] = $style;
            }
        }
        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if (is_array($address)) {
            $address = ObjectSerializer::serializeCollection($address, '', true);
        }
        if ($address !== null) {
            $queryParams['address'] = $address;
        }
        // query params
        if (is_array($departmentId)) {
            $departmentId = ObjectSerializer::serializeCollection($departmentId, '', true);
        }
        if ($departmentId !== null) {
            $queryParams['departmentId'] = $departmentId;
        }
        // query params
        if (is_array($bedroomsFrom)) {
            $bedroomsFrom = ObjectSerializer::serializeCollection($bedroomsFrom, '', true);
        }
        if ($bedroomsFrom !== null) {
            $queryParams['bedroomsFrom'] = $bedroomsFrom;
        }
        // query params
        if (is_array($bedroomsTo)) {
            $bedroomsTo = ObjectSerializer::serializeCollection($bedroomsTo, '', true);
        }
        if ($bedroomsTo !== null) {
            $queryParams['bedroomsTo'] = $bedroomsTo;
        }
        // query params
        if (is_array($priceFrom)) {
            $priceFrom = ObjectSerializer::serializeCollection($priceFrom, '', true);
        }
        if ($priceFrom !== null) {
            $queryParams['priceFrom'] = $priceFrom;
        }
        // query params
        if (is_array($priceTo)) {
            $priceTo = ObjectSerializer::serializeCollection($priceTo, '', true);
        }
        if ($priceTo !== null) {
            $queryParams['priceTo'] = $priceTo;
        }
        // query params
        if (is_array($rentFrom)) {
            $rentFrom = ObjectSerializer::serializeCollection($rentFrom, '', true);
        }
        if ($rentFrom !== null) {
            $queryParams['rentFrom'] = $rentFrom;
        }
        // query params
        if (is_array($rentTo)) {
            $rentTo = ObjectSerializer::serializeCollection($rentTo, '', true);
        }
        if ($rentTo !== null) {
            $queryParams['rentTo'] = $rentTo;
        }
        // query params
        if ($rentFrequency !== null) {
            if('form' === 'form' && is_array($rentFrequency)) {
                foreach($rentFrequency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rentFrequency'] = $rentFrequency;
            }
        }
        // query params
        if (is_array($internetAdvertising)) {
            $internetAdvertising = ObjectSerializer::serializeCollection($internetAdvertising, '', true);
        }
        if ($internetAdvertising !== null) {
            $queryParams['internetAdvertising'] = $internetAdvertising;
        }
        // query params
        if (is_array($fromArchive)) {
            $fromArchive = ObjectSerializer::serializeCollection($fromArchive, '', true);
        }
        if ($fromArchive !== null) {
            $queryParams['fromArchive'] = $fromArchive;
        }
        // query params
        if (is_array($createdFrom)) {
            $createdFrom = ObjectSerializer::serializeCollection($createdFrom, '', true);
        }
        if ($createdFrom !== null) {
            $queryParams['createdFrom'] = $createdFrom;
        }
        // query params
        if (is_array($createdTo)) {
            $createdTo = ObjectSerializer::serializeCollection($createdTo, '', true);
        }
        if ($createdTo !== null) {
            $queryParams['createdTo'] = $createdTo;
        }
        // query params
        if (is_array($modifiedFrom)) {
            $modifiedFrom = ObjectSerializer::serializeCollection($modifiedFrom, '', true);
        }
        if ($modifiedFrom !== null) {
            $queryParams['modifiedFrom'] = $modifiedFrom;
        }
        // query params
        if (is_array($modifiedTo)) {
            $modifiedTo = ObjectSerializer::serializeCollection($modifiedTo, '', true);
        }
        if ($modifiedTo !== null) {
            $queryParams['modifiedTo'] = $modifiedTo;
        }
        // query params
        if ($metadata !== null) {
            if('form' === 'form' && is_array($metadata)) {
                foreach($metadata as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadata'] = $metadata;
            }
        }
        // query params
        if ($extrasField !== null) {
            if('form' === 'form' && is_array($extrasField)) {
                foreach($extrasField as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['extrasField'] = $extrasField;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertiesIdCertificatesCertificateIdPatch
     *
     * Updates an existing certificate
     *
     * @param  string $ifMatch The ETag provided in the payload from the current version of this resource (required)
     * @param  string $id Unique property identifier (required)
     * @param  string $certificateId The unique identifier for the certificate to update. (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject39 $body body (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function propertiesIdCertificatesCertificateIdPatch($ifMatch, $id, $certificateId, $body = null)
    {
        $this->propertiesIdCertificatesCertificateIdPatchWithHttpInfo($ifMatch, $id, $certificateId, $body);
    }

    /**
     * Operation propertiesIdCertificatesCertificateIdPatchWithHttpInfo
     *
     * Updates an existing certificate
     *
     * @param  string $ifMatch The ETag provided in the payload from the current version of this resource (required)
     * @param  string $id Unique property identifier (required)
     * @param  string $certificateId The unique identifier for the certificate to update. (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject39 $body (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertiesIdCertificatesCertificateIdPatchWithHttpInfo($ifMatch, $id, $certificateId, $body = null)
    {
        $request = $this->propertiesIdCertificatesCertificateIdPatchRequest($ifMatch, $id, $certificateId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation propertiesIdCertificatesCertificateIdPatchAsync
     *
     * Updates an existing certificate
     *
     * @param  string $ifMatch The ETag provided in the payload from the current version of this resource (required)
     * @param  string $id Unique property identifier (required)
     * @param  string $certificateId The unique identifier for the certificate to update. (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject39 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesIdCertificatesCertificateIdPatchAsync($ifMatch, $id, $certificateId, $body = null)
    {
        return $this->propertiesIdCertificatesCertificateIdPatchAsyncWithHttpInfo($ifMatch, $id, $certificateId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertiesIdCertificatesCertificateIdPatchAsyncWithHttpInfo
     *
     * Updates an existing certificate
     *
     * @param  string $ifMatch The ETag provided in the payload from the current version of this resource (required)
     * @param  string $id Unique property identifier (required)
     * @param  string $certificateId The unique identifier for the certificate to update. (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject39 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesIdCertificatesCertificateIdPatchAsyncWithHttpInfo($ifMatch, $id, $certificateId, $body = null)
    {
        $returnType = '';
        $request = $this->propertiesIdCertificatesCertificateIdPatchRequest($ifMatch, $id, $certificateId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertiesIdCertificatesCertificateIdPatch'
     *
     * @param  string $ifMatch The ETag provided in the payload from the current version of this resource (required)
     * @param  string $id Unique property identifier (required)
     * @param  string $certificateId The unique identifier for the certificate to update. (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject39 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function propertiesIdCertificatesCertificateIdPatchRequest($ifMatch, $id, $certificateId, $body = null)
    {
        // verify the required parameter 'ifMatch' is set
        if ($ifMatch === null || (is_array($ifMatch) && count($ifMatch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifMatch when calling propertiesIdCertificatesCertificateIdPatch'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling propertiesIdCertificatesCertificateIdPatch'
            );
        }
        // verify the required parameter 'certificateId' is set
        if ($certificateId === null || (is_array($certificateId) && count($certificateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $certificateId when calling propertiesIdCertificatesCertificateIdPatch'
            );
        }

        $resourcePath = '/properties/{id}/certificates/{certificateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($ifMatch !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($ifMatch);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($certificateId !== null) {
            $resourcePath = str_replace(
                '{' . 'certificateId' . '}',
                ObjectSerializer::toPathValue($certificateId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertiesIdCertificatesGet
     *
     * Gets a collection of certificates for a specific property
     *
     * @param  string $id Unique property identifier (required)
     * @param  int $pageSize A limit on the number of properties to be returned per page. Value can range between 1 and 100, and the default is 25 (optional)
     * @param  int $pageNumber The page number to return (must be greater than 0) (optional)
     * @param  string[] $category Only return certificates where the &#x60;category&#x60; field matches one or more values provided (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028
     */
    public function propertiesIdCertificatesGet($id, $pageSize = null, $pageNumber = null, $category = null)
    {
        list($response) = $this->propertiesIdCertificatesGetWithHttpInfo($id, $pageSize, $pageNumber, $category);
        return $response;
    }

    /**
     * Operation propertiesIdCertificatesGetWithHttpInfo
     *
     * Gets a collection of certificates for a specific property
     *
     * @param  string $id Unique property identifier (required)
     * @param  int $pageSize A limit on the number of properties to be returned per page. Value can range between 1 and 100, and the default is 25 (optional)
     * @param  int $pageNumber The page number to return (must be greater than 0) (optional)
     * @param  string[] $category Only return certificates where the &#x60;category&#x60; field matches one or more values provided (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertiesIdCertificatesGetWithHttpInfo($id, $pageSize = null, $pageNumber = null, $category = null)
    {
        $request = $this->propertiesIdCertificatesGetRequest($id, $pageSize, $pageNumber, $category);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation propertiesIdCertificatesGetAsync
     *
     * Gets a collection of certificates for a specific property
     *
     * @param  string $id Unique property identifier (required)
     * @param  int $pageSize A limit on the number of properties to be returned per page. Value can range between 1 and 100, and the default is 25 (optional)
     * @param  int $pageNumber The page number to return (must be greater than 0) (optional)
     * @param  string[] $category Only return certificates where the &#x60;category&#x60; field matches one or more values provided (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesIdCertificatesGetAsync($id, $pageSize = null, $pageNumber = null, $category = null)
    {
        return $this->propertiesIdCertificatesGetAsyncWithHttpInfo($id, $pageSize, $pageNumber, $category)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertiesIdCertificatesGetAsyncWithHttpInfo
     *
     * Gets a collection of certificates for a specific property
     *
     * @param  string $id Unique property identifier (required)
     * @param  int $pageSize A limit on the number of properties to be returned per page. Value can range between 1 and 100, and the default is 25 (optional)
     * @param  int $pageNumber The page number to return (must be greater than 0) (optional)
     * @param  string[] $category Only return certificates where the &#x60;category&#x60; field matches one or more values provided (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesIdCertificatesGetAsyncWithHttpInfo($id, $pageSize = null, $pageNumber = null, $category = null)
    {
        $returnType = '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20028';
        $request = $this->propertiesIdCertificatesGetRequest($id, $pageSize, $pageNumber, $category);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertiesIdCertificatesGet'
     *
     * @param  string $id Unique property identifier (required)
     * @param  int $pageSize A limit on the number of properties to be returned per page. Value can range between 1 and 100, and the default is 25 (optional)
     * @param  int $pageNumber The page number to return (must be greater than 0) (optional)
     * @param  string[] $category Only return certificates where the &#x60;category&#x60; field matches one or more values provided (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function propertiesIdCertificatesGetRequest($id, $pageSize = null, $pageNumber = null, $category = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling propertiesIdCertificatesGet'
            );
        }


        $resourcePath = '/properties/{id}/certificates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($pageNumber)) {
            $pageNumber = ObjectSerializer::serializeCollection($pageNumber, '', true);
        }
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = $pageNumber;
        }
        // query params
        if ($category !== null) {
            if('form' === 'form' && is_array($category)) {
                foreach($category as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['category'] = $category;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertiesIdCertificatesPost
     *
     * Creates a new certificate
     *
     * @param  string $id Unique property identifier (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject38 $body body (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function propertiesIdCertificatesPost($id, $body = null)
    {
        $this->propertiesIdCertificatesPostWithHttpInfo($id, $body);
    }

    /**
     * Operation propertiesIdCertificatesPostWithHttpInfo
     *
     * Creates a new certificate
     *
     * @param  string $id Unique property identifier (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject38 $body (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertiesIdCertificatesPostWithHttpInfo($id, $body = null)
    {
        $request = $this->propertiesIdCertificatesPostRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation propertiesIdCertificatesPostAsync
     *
     * Creates a new certificate
     *
     * @param  string $id Unique property identifier (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject38 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesIdCertificatesPostAsync($id, $body = null)
    {
        return $this->propertiesIdCertificatesPostAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertiesIdCertificatesPostAsyncWithHttpInfo
     *
     * Creates a new certificate
     *
     * @param  string $id Unique property identifier (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject38 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesIdCertificatesPostAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '';
        $request = $this->propertiesIdCertificatesPostRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertiesIdCertificatesPost'
     *
     * @param  string $id Unique property identifier (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject38 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function propertiesIdCertificatesPostRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling propertiesIdCertificatesPost'
            );
        }

        $resourcePath = '/properties/{id}/certificates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertiesIdPatch
     *
     * Updates a property by unique identifier
     *
     * @param  string $ifMatch The ETag provided in the payload from the current version of this resource (required)
     * @param  string $id The unique identifier for the property to update. (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject37 $body body (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function propertiesIdPatch($ifMatch, $id, $body = null)
    {
        $this->propertiesIdPatchWithHttpInfo($ifMatch, $id, $body);
    }

    /**
     * Operation propertiesIdPatchWithHttpInfo
     *
     * Updates a property by unique identifier
     *
     * @param  string $ifMatch The ETag provided in the payload from the current version of this resource (required)
     * @param  string $id The unique identifier for the property to update. (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject37 $body (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertiesIdPatchWithHttpInfo($ifMatch, $id, $body = null)
    {
        $request = $this->propertiesIdPatchRequest($ifMatch, $id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation propertiesIdPatchAsync
     *
     * Updates a property by unique identifier
     *
     * @param  string $ifMatch The ETag provided in the payload from the current version of this resource (required)
     * @param  string $id The unique identifier for the property to update. (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject37 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesIdPatchAsync($ifMatch, $id, $body = null)
    {
        return $this->propertiesIdPatchAsyncWithHttpInfo($ifMatch, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertiesIdPatchAsyncWithHttpInfo
     *
     * Updates a property by unique identifier
     *
     * @param  string $ifMatch The ETag provided in the payload from the current version of this resource (required)
     * @param  string $id The unique identifier for the property to update. (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject37 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesIdPatchAsyncWithHttpInfo($ifMatch, $id, $body = null)
    {
        $returnType = '';
        $request = $this->propertiesIdPatchRequest($ifMatch, $id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertiesIdPatch'
     *
     * @param  string $ifMatch The ETag provided in the payload from the current version of this resource (required)
     * @param  string $id The unique identifier for the property to update. (required)
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject37 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function propertiesIdPatchRequest($ifMatch, $id, $body = null)
    {
        // verify the required parameter 'ifMatch' is set
        if ($ifMatch === null || (is_array($ifMatch) && count($ifMatch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifMatch when calling propertiesIdPatch'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling propertiesIdPatch'
            );
        }

        $resourcePath = '/properties/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($ifMatch !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($ifMatch);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertiesPost
     *
     * Creates a new property
     *
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject36 $body body (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function propertiesPost($body = null)
    {
        $this->propertiesPostWithHttpInfo($body);
    }

    /**
     * Operation propertiesPostWithHttpInfo
     *
     * Creates a new property
     *
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject36 $body (optional)
     *
     * @throws \NorthernEstateAgencies\ReapitFoundationsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertiesPostWithHttpInfo($body = null)
    {
        $request = $this->propertiesPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation propertiesPostAsync
     *
     * Creates a new property
     *
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject36 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesPostAsync($body = null)
    {
        return $this->propertiesPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertiesPostAsyncWithHttpInfo
     *
     * Creates a new property
     *
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject36 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertiesPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->propertiesPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertiesPost'
     *
     * @param  \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineObject36 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function propertiesPostRequest($body = null)
    {

        $resourcePath = '/properties/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
