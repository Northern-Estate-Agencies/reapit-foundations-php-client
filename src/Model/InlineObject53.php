<?php
/**
 * InlineObject53
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foundations Interactive API Explorer
 *
 * <p>Technical documentation for the Reapit Foundations REST API endpoints. This tool is interactive and provides instant access to data hosted in our <strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation#sandbox-mode\">sandbox environment</a> </strong>with <strong>authentication</strong> and <strong>versioning</strong> headers pre-populated. Example requests and responses are shown by default but you can switch to view a fully documented schema - look for the&nbsp;<strong>model</strong> link.</p> <p>* To begin developing with the platform, consult our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation\">documentation</a></strong>&nbsp;<br />* To report a bug or request a new feature, see our <strong><a href=\"https://developers.reapit.cloud/help\">help pages</a>&nbsp;<br /></strong>* For information on terminology, see our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/platform-glossary\">glossary</a></strong>&nbsp;<br />* Our APIs are located at&nbsp;<strong>https://platform.reapit.cloud<br /></strong>* The current API version is&nbsp;<strong>2020-01-31<br /></strong></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NorthernEstateAgencies\ReapitFoundationsClient\Model;

use \ArrayAccess;
use \NorthernEstateAgencies\ReapitFoundationsClient\ObjectSerializer;

/**
 * InlineObject53 Class Doc Comment
 *
 * @category Class
 * @description Request body used to update an existing vendor
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineObject53 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_53';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lastCall' => '\DateTime',
        'nextCall' => '\DateTime',
        'typeId' => 'string',
        'sellingReasonId' => 'string',
        'solicitorId' => 'string',
        'source' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20037Source',
        'metadata' => 'array<string,object>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lastCall' => 'date',
        'nextCall' => 'date',
        'typeId' => null,
        'sellingReasonId' => null,
        'solicitorId' => null,
        'source' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lastCall' => 'lastCall',
        'nextCall' => 'nextCall',
        'typeId' => 'typeId',
        'sellingReasonId' => 'sellingReasonId',
        'solicitorId' => 'solicitorId',
        'source' => 'source',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lastCall' => 'setLastCall',
        'nextCall' => 'setNextCall',
        'typeId' => 'setTypeId',
        'sellingReasonId' => 'setSellingReasonId',
        'solicitorId' => 'setSolicitorId',
        'source' => 'setSource',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lastCall' => 'getLastCall',
        'nextCall' => 'getNextCall',
        'typeId' => 'getTypeId',
        'sellingReasonId' => 'getSellingReasonId',
        'solicitorId' => 'getSolicitorId',
        'source' => 'getSource',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lastCall'] = $data['lastCall'] ?? null;
        $this->container['nextCall'] = $data['nextCall'] ?? null;
        $this->container['typeId'] = $data['typeId'] ?? null;
        $this->container['sellingReasonId'] = $data['sellingReasonId'] ?? null;
        $this->container['solicitorId'] = $data['solicitorId'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lastCall
     *
     * @return \DateTime|null
     */
    public function getLastCall()
    {
        return $this->container['lastCall'];
    }

    /**
     * Sets lastCall
     *
     * @param \DateTime|null $lastCall The date the vendor was last called
     *
     * @return self
     */
    public function setLastCall($lastCall)
    {
        $this->container['lastCall'] = $lastCall;

        return $this;
    }

    /**
     * Gets nextCall
     *
     * @return \DateTime|null
     */
    public function getNextCall()
    {
        return $this->container['nextCall'];
    }

    /**
     * Sets nextCall
     *
     * @param \DateTime|null $nextCall The date the vendor is next due to be called
     *
     * @return self
     */
    public function setNextCall($nextCall)
    {
        $this->container['nextCall'] = $nextCall;

        return $this;
    }

    /**
     * Gets typeId
     *
     * @return string|null
     */
    public function getTypeId()
    {
        return $this->container['typeId'];
    }

    /**
     * Sets typeId
     *
     * @param string|null $typeId The unique identifier of the type of vendor
     *
     * @return self
     */
    public function setTypeId($typeId)
    {
        $this->container['typeId'] = $typeId;

        return $this;
    }

    /**
     * Gets sellingReasonId
     *
     * @return string|null
     */
    public function getSellingReasonId()
    {
        return $this->container['sellingReasonId'];
    }

    /**
     * Sets sellingReasonId
     *
     * @param string|null $sellingReasonId The unique identifier of the reason the vendor is selling
     *
     * @return self
     */
    public function setSellingReasonId($sellingReasonId)
    {
        $this->container['sellingReasonId'] = $sellingReasonId;

        return $this;
    }

    /**
     * Gets solicitorId
     *
     * @return string|null
     */
    public function getSolicitorId()
    {
        return $this->container['solicitorId'];
    }

    /**
     * Sets solicitorId
     *
     * @param string|null $solicitorId The unique identifier of the vendor's solicitor
     *
     * @return self
     */
    public function setSolicitorId($solicitorId)
    {
        $this->container['solicitorId'] = $solicitorId;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20037Source|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20037Source|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,object>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,object>|null $metadata App specific metadata that has been set against the vendor
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


