<?php
/**
 * UpdatePropertyModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foundations Interactive API Explorer
 *
 * <p>Technical documentation for the Reapit Foundations REST API endpoints. This tool is interactive and provides instant access to data hosted in our <strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation#sandbox-mode\">sandbox environment</a> </strong>with <strong>authentication</strong> and <strong>versioning</strong> headers pre-populated. Example requests and responses are shown by default but you can switch to view a fully documented schema - look for the&nbsp;<strong>model</strong> link.</p> <p>* To begin developing with the platform, consult our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation\">documentation</a></strong>&nbsp;<br />* To report a bug or request a new feature, see our <strong><a href=\"https://developers.reapit.cloud/help\">help pages</a>&nbsp;<br /></strong>* For information on terminology, see our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/platform-glossary\">glossary</a></strong>&nbsp;<br />* Our APIs are located at&nbsp;<strong>https://platform.reapit.cloud<br /></strong>* The current API version is&nbsp;<strong>2020-01-31<br /></strong></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NorthernEstateAgencies\ReapitFoundationsClient\Model;

use \ArrayAccess;
use \NorthernEstateAgencies\ReapitFoundationsClient\ObjectSerializer;

/**
 * UpdatePropertyModel Class Doc Comment
 *
 * @category Class
 * @description Request body used to update an existing property
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UpdatePropertyModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdatePropertyModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'strapline' => 'string',
        'description' => 'string',
        'summary' => 'string',
        'alternateId' => 'string',
        'address' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdAddress',
        'bedrooms' => 'int',
        'receptions' => 'int',
        'bathrooms' => 'int',
        'councilTax' => 'string',
        'internetAdvertising' => 'bool',
        'viewingArrangements' => 'string',
        'videoUrl' => 'string',
        'videoCaption' => 'string',
        'video2Url' => 'string',
        'video2Caption' => 'string',
        'notes' => 'string',
        'longDescription' => 'string',
        'boardStatus' => 'string',
        'boardNotes' => 'string',
        'boardUpdated' => '\DateTime',
        'epc' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdEpc',
        'externalArea' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdExternalArea',
        'internalArea' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdInternalArea',
        'selling' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdSelling',
        'letting' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdLetting',
        'type' => 'string[]',
        'style' => 'string[]',
        'situation' => 'string[]',
        'parking' => 'string[]',
        'age' => 'string[]',
        'locality' => 'string[]',
        'negotiatorId' => 'string',
        'officeIds' => 'string[]',
        'areaId' => 'string',
        'metadata' => 'array<string,object>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'strapline' => null,
        'description' => null,
        'summary' => null,
        'alternateId' => null,
        'address' => null,
        'bedrooms' => 'int32',
        'receptions' => 'int32',
        'bathrooms' => 'int32',
        'councilTax' => null,
        'internetAdvertising' => null,
        'viewingArrangements' => null,
        'videoUrl' => null,
        'videoCaption' => null,
        'video2Url' => null,
        'video2Caption' => null,
        'notes' => null,
        'longDescription' => null,
        'boardStatus' => null,
        'boardNotes' => null,
        'boardUpdated' => 'date',
        'epc' => null,
        'externalArea' => null,
        'internalArea' => null,
        'selling' => null,
        'letting' => null,
        'type' => null,
        'style' => null,
        'situation' => null,
        'parking' => null,
        'age' => null,
        'locality' => null,
        'negotiatorId' => null,
        'officeIds' => null,
        'areaId' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'strapline' => 'strapline',
        'description' => 'description',
        'summary' => 'summary',
        'alternateId' => 'alternateId',
        'address' => 'address',
        'bedrooms' => 'bedrooms',
        'receptions' => 'receptions',
        'bathrooms' => 'bathrooms',
        'councilTax' => 'councilTax',
        'internetAdvertising' => 'internetAdvertising',
        'viewingArrangements' => 'viewingArrangements',
        'videoUrl' => 'videoUrl',
        'videoCaption' => 'videoCaption',
        'video2Url' => 'video2Url',
        'video2Caption' => 'video2Caption',
        'notes' => 'notes',
        'longDescription' => 'longDescription',
        'boardStatus' => 'boardStatus',
        'boardNotes' => 'boardNotes',
        'boardUpdated' => 'boardUpdated',
        'epc' => 'epc',
        'externalArea' => 'externalArea',
        'internalArea' => 'internalArea',
        'selling' => 'selling',
        'letting' => 'letting',
        'type' => 'type',
        'style' => 'style',
        'situation' => 'situation',
        'parking' => 'parking',
        'age' => 'age',
        'locality' => 'locality',
        'negotiatorId' => 'negotiatorId',
        'officeIds' => 'officeIds',
        'areaId' => 'areaId',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'strapline' => 'setStrapline',
        'description' => 'setDescription',
        'summary' => 'setSummary',
        'alternateId' => 'setAlternateId',
        'address' => 'setAddress',
        'bedrooms' => 'setBedrooms',
        'receptions' => 'setReceptions',
        'bathrooms' => 'setBathrooms',
        'councilTax' => 'setCouncilTax',
        'internetAdvertising' => 'setInternetAdvertising',
        'viewingArrangements' => 'setViewingArrangements',
        'videoUrl' => 'setVideoUrl',
        'videoCaption' => 'setVideoCaption',
        'video2Url' => 'setVideo2Url',
        'video2Caption' => 'setVideo2Caption',
        'notes' => 'setNotes',
        'longDescription' => 'setLongDescription',
        'boardStatus' => 'setBoardStatus',
        'boardNotes' => 'setBoardNotes',
        'boardUpdated' => 'setBoardUpdated',
        'epc' => 'setEpc',
        'externalArea' => 'setExternalArea',
        'internalArea' => 'setInternalArea',
        'selling' => 'setSelling',
        'letting' => 'setLetting',
        'type' => 'setType',
        'style' => 'setStyle',
        'situation' => 'setSituation',
        'parking' => 'setParking',
        'age' => 'setAge',
        'locality' => 'setLocality',
        'negotiatorId' => 'setNegotiatorId',
        'officeIds' => 'setOfficeIds',
        'areaId' => 'setAreaId',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'strapline' => 'getStrapline',
        'description' => 'getDescription',
        'summary' => 'getSummary',
        'alternateId' => 'getAlternateId',
        'address' => 'getAddress',
        'bedrooms' => 'getBedrooms',
        'receptions' => 'getReceptions',
        'bathrooms' => 'getBathrooms',
        'councilTax' => 'getCouncilTax',
        'internetAdvertising' => 'getInternetAdvertising',
        'viewingArrangements' => 'getViewingArrangements',
        'videoUrl' => 'getVideoUrl',
        'videoCaption' => 'getVideoCaption',
        'video2Url' => 'getVideo2Url',
        'video2Caption' => 'getVideo2Caption',
        'notes' => 'getNotes',
        'longDescription' => 'getLongDescription',
        'boardStatus' => 'getBoardStatus',
        'boardNotes' => 'getBoardNotes',
        'boardUpdated' => 'getBoardUpdated',
        'epc' => 'getEpc',
        'externalArea' => 'getExternalArea',
        'internalArea' => 'getInternalArea',
        'selling' => 'getSelling',
        'letting' => 'getLetting',
        'type' => 'getType',
        'style' => 'getStyle',
        'situation' => 'getSituation',
        'parking' => 'getParking',
        'age' => 'getAge',
        'locality' => 'getLocality',
        'negotiatorId' => 'getNegotiatorId',
        'officeIds' => 'getOfficeIds',
        'areaId' => 'getAreaId',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['strapline'] = $data['strapline'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['summary'] = $data['summary'] ?? null;
        $this->container['alternateId'] = $data['alternateId'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['bedrooms'] = $data['bedrooms'] ?? null;
        $this->container['receptions'] = $data['receptions'] ?? null;
        $this->container['bathrooms'] = $data['bathrooms'] ?? null;
        $this->container['councilTax'] = $data['councilTax'] ?? null;
        $this->container['internetAdvertising'] = $data['internetAdvertising'] ?? null;
        $this->container['viewingArrangements'] = $data['viewingArrangements'] ?? null;
        $this->container['videoUrl'] = $data['videoUrl'] ?? null;
        $this->container['videoCaption'] = $data['videoCaption'] ?? null;
        $this->container['video2Url'] = $data['video2Url'] ?? null;
        $this->container['video2Caption'] = $data['video2Caption'] ?? null;
        $this->container['notes'] = $data['notes'] ?? null;
        $this->container['longDescription'] = $data['longDescription'] ?? null;
        $this->container['boardStatus'] = $data['boardStatus'] ?? null;
        $this->container['boardNotes'] = $data['boardNotes'] ?? null;
        $this->container['boardUpdated'] = $data['boardUpdated'] ?? null;
        $this->container['epc'] = $data['epc'] ?? null;
        $this->container['externalArea'] = $data['externalArea'] ?? null;
        $this->container['internalArea'] = $data['internalArea'] ?? null;
        $this->container['selling'] = $data['selling'] ?? null;
        $this->container['letting'] = $data['letting'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['style'] = $data['style'] ?? null;
        $this->container['situation'] = $data['situation'] ?? null;
        $this->container['parking'] = $data['parking'] ?? null;
        $this->container['age'] = $data['age'] ?? null;
        $this->container['locality'] = $data['locality'] ?? null;
        $this->container['negotiatorId'] = $data['negotiatorId'] ?? null;
        $this->container['officeIds'] = $data['officeIds'] ?? null;
        $this->container['areaId'] = $data['areaId'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets strapline
     *
     * @return string|null
     */
    public function getStrapline()
    {
        return $this->container['strapline'];
    }

    /**
     * Sets strapline
     *
     * @param string|null $strapline The strapline description containing a short summary about the property
     *
     * @return self
     */
    public function setStrapline($strapline)
    {
        $this->container['strapline'] = $strapline;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The brief description of the property
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary The summary of accommodation, typically short phrases or bullet points describing the key features of the property
     *
     * @return self
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets alternateId
     *
     * @return string|null
     */
    public function getAlternateId()
    {
        return $this->container['alternateId'];
    }

    /**
     * Sets alternateId
     *
     * @param string|null $alternateId An optional alternative identifier specified for this property
     *
     * @return self
     */
    public function setAlternateId($alternateId)
    {
        $this->container['alternateId'] = $alternateId;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return int|null
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param int|null $bedrooms The total number of bedrooms in the property
     *
     * @return self
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets receptions
     *
     * @return int|null
     */
    public function getReceptions()
    {
        return $this->container['receptions'];
    }

    /**
     * Sets receptions
     *
     * @param int|null $receptions The total number of reception rooms in the property
     *
     * @return self
     */
    public function setReceptions($receptions)
    {
        $this->container['receptions'] = $receptions;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return int|null
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param int|null $bathrooms The total number of bathrooms in the property
     *
     * @return self
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets councilTax
     *
     * @return string|null
     */
    public function getCouncilTax()
    {
        return $this->container['councilTax'];
    }

    /**
     * Sets councilTax
     *
     * @param string|null $councilTax The council tax banding of the property (A/B/C/D/E/F/G/H)
     *
     * @return self
     */
    public function setCouncilTax($councilTax)
    {
        $this->container['councilTax'] = $councilTax;

        return $this;
    }

    /**
     * Gets internetAdvertising
     *
     * @return bool|null
     */
    public function getInternetAdvertising()
    {
        return $this->container['internetAdvertising'];
    }

    /**
     * Sets internetAdvertising
     *
     * @param bool|null $internetAdvertising A flag denoting whether or not this property can be advertised on the internet
     *
     * @return self
     */
    public function setInternetAdvertising($internetAdvertising)
    {
        $this->container['internetAdvertising'] = $internetAdvertising;

        return $this;
    }

    /**
     * Gets viewingArrangements
     *
     * @return string|null
     */
    public function getViewingArrangements()
    {
        return $this->container['viewingArrangements'];
    }

    /**
     * Sets viewingArrangements
     *
     * @param string|null $viewingArrangements The arrangements regarding viewing the property
     *
     * @return self
     */
    public function setViewingArrangements($viewingArrangements)
    {
        $this->container['viewingArrangements'] = $viewingArrangements;

        return $this;
    }

    /**
     * Gets videoUrl
     *
     * @return string|null
     */
    public function getVideoUrl()
    {
        return $this->container['videoUrl'];
    }

    /**
     * Sets videoUrl
     *
     * @param string|null $videoUrl The url of a video associated with this property, such as a virtual tour
     *
     * @return self
     */
    public function setVideoUrl($videoUrl)
    {
        $this->container['videoUrl'] = $videoUrl;

        return $this;
    }

    /**
     * Gets videoCaption
     *
     * @return string|null
     */
    public function getVideoCaption()
    {
        return $this->container['videoCaption'];
    }

    /**
     * Sets videoCaption
     *
     * @param string|null $videoCaption The caption for the video url associated with this property
     *
     * @return self
     */
    public function setVideoCaption($videoCaption)
    {
        $this->container['videoCaption'] = $videoCaption;

        return $this;
    }

    /**
     * Gets video2Url
     *
     * @return string|null
     */
    public function getVideo2Url()
    {
        return $this->container['video2Url'];
    }

    /**
     * Sets video2Url
     *
     * @param string|null $video2Url The url of a second video associated with this property, such as a virtual tour
     *
     * @return self
     */
    public function setVideo2Url($video2Url)
    {
        $this->container['video2Url'] = $video2Url;

        return $this;
    }

    /**
     * Gets video2Caption
     *
     * @return string|null
     */
    public function getVideo2Caption()
    {
        return $this->container['video2Caption'];
    }

    /**
     * Sets video2Caption
     *
     * @param string|null $video2Caption The caption for the second video url associated with this property
     *
     * @return self
     */
    public function setVideo2Caption($video2Caption)
    {
        $this->container['video2Caption'] = $video2Caption;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Any general notes regarding the property. These are not usually exposed to end users and may contain sensitive information about a sale
     *
     * @return self
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets longDescription
     *
     * @return string|null
     */
    public function getLongDescription()
    {
        return $this->container['longDescription'];
    }

    /**
     * Sets longDescription
     *
     * @param string|null $longDescription The long description of the property
     *
     * @return self
     */
    public function setLongDescription($longDescription)
    {
        $this->container['longDescription'] = $longDescription;

        return $this;
    }

    /**
     * Gets boardStatus
     *
     * @return string|null
     */
    public function getBoardStatus()
    {
        return $this->container['boardStatus'];
    }

    /**
     * Sets boardStatus
     *
     * @param string|null $boardStatus The status of the advertising board sited outside or near to the property
     *
     * @return self
     */
    public function setBoardStatus($boardStatus)
    {
        $this->container['boardStatus'] = $boardStatus;

        return $this;
    }

    /**
     * Gets boardNotes
     *
     * @return string|null
     */
    public function getBoardNotes()
    {
        return $this->container['boardNotes'];
    }

    /**
     * Sets boardNotes
     *
     * @param string|null $boardNotes Any notes relevant to the advertising board sited outside or near to the property
     *
     * @return self
     */
    public function setBoardNotes($boardNotes)
    {
        $this->container['boardNotes'] = $boardNotes;

        return $this;
    }

    /**
     * Gets boardUpdated
     *
     * @return \DateTime|null
     */
    public function getBoardUpdated()
    {
        return $this->container['boardUpdated'];
    }

    /**
     * Sets boardUpdated
     *
     * @param \DateTime|null $boardUpdated The date the advertising board was last updated (or should be updated when the date is in the future)
     *
     * @return self
     */
    public function setBoardUpdated($boardUpdated)
    {
        $this->container['boardUpdated'] = $boardUpdated;

        return $this;
    }

    /**
     * Gets epc
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdEpc|null
     */
    public function getEpc()
    {
        return $this->container['epc'];
    }

    /**
     * Sets epc
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdEpc|null $epc epc
     *
     * @return self
     */
    public function setEpc($epc)
    {
        $this->container['epc'] = $epc;

        return $this;
    }

    /**
     * Gets externalArea
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdExternalArea|null
     */
    public function getExternalArea()
    {
        return $this->container['externalArea'];
    }

    /**
     * Sets externalArea
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdExternalArea|null $externalArea externalArea
     *
     * @return self
     */
    public function setExternalArea($externalArea)
    {
        $this->container['externalArea'] = $externalArea;

        return $this;
    }

    /**
     * Gets internalArea
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdInternalArea|null
     */
    public function getInternalArea()
    {
        return $this->container['internalArea'];
    }

    /**
     * Sets internalArea
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdInternalArea|null $internalArea internalArea
     *
     * @return self
     */
    public function setInternalArea($internalArea)
    {
        $this->container['internalArea'] = $internalArea;

        return $this;
    }

    /**
     * Gets selling
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdSelling|null
     */
    public function getSelling()
    {
        return $this->container['selling'];
    }

    /**
     * Sets selling
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdSelling|null $selling selling
     *
     * @return self
     */
    public function setSelling($selling)
    {
        $this->container['selling'] = $selling;

        return $this;
    }

    /**
     * Gets letting
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdLetting|null
     */
    public function getLetting()
    {
        return $this->container['letting'];
    }

    /**
     * Sets letting
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\PropertiesIdLetting|null $letting letting
     *
     * @return self
     */
    public function setLetting($letting)
    {
        $this->container['letting'] = $letting;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string[]|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string[]|null $type The attributes describing the overall type of the property (eg house, bungalow, land), as defined by the property's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string[]|null
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string[]|null $style The attributes describing the style of property (eg detached, semiDetached), defined by the property's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets situation
     *
     * @return string[]|null
     */
    public function getSituation()
    {
        return $this->container['situation'];
    }

    /**
     * Sets situation
     *
     * @param string[]|null $situation The attributes describing other aspects of the property - such as outside space - as defined by the property's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setSituation($situation)
    {
        $this->container['situation'] = $situation;

        return $this;
    }

    /**
     * Gets parking
     *
     * @return string[]|null
     */
    public function getParking()
    {
        return $this->container['parking'];
    }

    /**
     * Sets parking
     *
     * @param string[]|null $parking The attributes describing the parking available at the property (eg garage), as defined by the property's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setParking($parking)
    {
        $this->container['parking'] = $parking;

        return $this;
    }

    /**
     * Gets age
     *
     * @return string[]|null
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param string[]|null $age The attributes describing the age of the property (eg new, period), as defined by the property's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string[]|null
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string[]|null $locality The attributes describing the general location of the property (eg rural, townCity), as defined by the property's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setLocality($locality)
    {
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets negotiatorId
     *
     * @return string|null
     */
    public function getNegotiatorId()
    {
        return $this->container['negotiatorId'];
    }

    /**
     * Sets negotiatorId
     *
     * @param string|null $negotiatorId The unique identifier of the negotiator managing the property
     *
     * @return self
     */
    public function setNegotiatorId($negotiatorId)
    {
        $this->container['negotiatorId'] = $negotiatorId;

        return $this;
    }

    /**
     * Gets officeIds
     *
     * @return string[]|null
     */
    public function getOfficeIds()
    {
        return $this->container['officeIds'];
    }

    /**
     * Sets officeIds
     *
     * @param string[]|null $officeIds A collection of unique identifiers of offices attached to the property
     *
     * @return self
     */
    public function setOfficeIds($officeIds)
    {
        $this->container['officeIds'] = $officeIds;

        return $this;
    }

    /**
     * Gets areaId
     *
     * @return string|null
     */
    public function getAreaId()
    {
        return $this->container['areaId'];
    }

    /**
     * Sets areaId
     *
     * @param string|null $areaId The unique identifier of the area that the property resides in
     *
     * @return self
     */
    public function setAreaId($areaId)
    {
        $this->container['areaId'] = $areaId;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,object>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,object>|null $metadata App specific metadata to set against the property
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


