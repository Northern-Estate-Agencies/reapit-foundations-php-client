<?php
/**
 * TaskModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foundations Interactive API Explorer
 *
 * <p>Technical documentation for the Reapit Foundations REST API endpoints. This tool is interactive and provides instant access to data hosted in our <strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation#sandbox-mode\">sandbox environment</a> </strong>with <strong>authentication</strong> and <strong>versioning</strong> headers pre-populated. Example requests and responses are shown by default but you can switch to view a fully documented schema - look for the&nbsp;<strong>model</strong> link.</p> <p>* To begin developing with the platform, consult our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation\">documentation</a></strong>&nbsp;<br />* To report a bug or request a new feature, see our <strong><a href=\"https://developers.reapit.cloud/help\">help pages</a>&nbsp;<br /></strong>* For information on terminology, see our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/platform-glossary\">glossary</a></strong>&nbsp;<br />* Our APIs are located at&nbsp;<strong>https://platform.reapit.cloud<br /></strong>* The current API version is&nbsp;<strong>2020-01-31<br /></strong></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NorthernEstateAgencies\ReapitFoundationsClient\Model;

use \ArrayAccess;
use \NorthernEstateAgencies\ReapitFoundationsClient\ObjectSerializer;

/**
 * TaskModel Class Doc Comment
 *
 * @category Class
 * @description Representation of a task, which can also be an internal message
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TaskModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'links' => 'array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>',
        'embedded' => 'array<string,object>',
        'id' => 'string',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'activates' => '\DateTime',
        'completed' => '\DateTime',
        'typeId' => 'string',
        'senderId' => 'string',
        'text' => 'string',
        'landlordId' => 'string',
        'propertyId' => 'string',
        'applicantId' => 'string',
        'tenancyId' => 'string',
        'contactId' => 'string',
        'recipientId' => 'string',
        'recipientType' => 'string',
        'metadata' => 'array<string,object>',
        'eTag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'links' => null,
        'embedded' => null,
        'id' => null,
        'created' => 'date-time',
        'modified' => 'date-time',
        'activates' => 'date',
        'completed' => 'date',
        'typeId' => null,
        'senderId' => null,
        'text' => null,
        'landlordId' => null,
        'propertyId' => null,
        'applicantId' => null,
        'tenancyId' => null,
        'contactId' => null,
        'recipientId' => null,
        'recipientType' => null,
        'metadata' => null,
        'eTag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'embedded' => '_embedded',
        'id' => 'id',
        'created' => 'created',
        'modified' => 'modified',
        'activates' => 'activates',
        'completed' => 'completed',
        'typeId' => 'typeId',
        'senderId' => 'senderId',
        'text' => 'text',
        'landlordId' => 'landlordId',
        'propertyId' => 'propertyId',
        'applicantId' => 'applicantId',
        'tenancyId' => 'tenancyId',
        'contactId' => 'contactId',
        'recipientId' => 'recipientId',
        'recipientType' => 'recipientType',
        'metadata' => 'metadata',
        'eTag' => '_eTag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'embedded' => 'setEmbedded',
        'id' => 'setId',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'activates' => 'setActivates',
        'completed' => 'setCompleted',
        'typeId' => 'setTypeId',
        'senderId' => 'setSenderId',
        'text' => 'setText',
        'landlordId' => 'setLandlordId',
        'propertyId' => 'setPropertyId',
        'applicantId' => 'setApplicantId',
        'tenancyId' => 'setTenancyId',
        'contactId' => 'setContactId',
        'recipientId' => 'setRecipientId',
        'recipientType' => 'setRecipientType',
        'metadata' => 'setMetadata',
        'eTag' => 'setETag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'embedded' => 'getEmbedded',
        'id' => 'getId',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'activates' => 'getActivates',
        'completed' => 'getCompleted',
        'typeId' => 'getTypeId',
        'senderId' => 'getSenderId',
        'text' => 'getText',
        'landlordId' => 'getLandlordId',
        'propertyId' => 'getPropertyId',
        'applicantId' => 'getApplicantId',
        'tenancyId' => 'getTenancyId',
        'contactId' => 'getContactId',
        'recipientId' => 'getRecipientId',
        'recipientType' => 'getRecipientType',
        'metadata' => 'getMetadata',
        'eTag' => 'getETag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = $data['links'] ?? null;
        $this->container['embedded'] = $data['embedded'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['modified'] = $data['modified'] ?? null;
        $this->container['activates'] = $data['activates'] ?? null;
        $this->container['completed'] = $data['completed'] ?? null;
        $this->container['typeId'] = $data['typeId'] ?? null;
        $this->container['senderId'] = $data['senderId'] ?? null;
        $this->container['text'] = $data['text'] ?? null;
        $this->container['landlordId'] = $data['landlordId'] ?? null;
        $this->container['propertyId'] = $data['propertyId'] ?? null;
        $this->container['applicantId'] = $data['applicantId'] ?? null;
        $this->container['tenancyId'] = $data['tenancyId'] ?? null;
        $this->container['contactId'] = $data['contactId'] ?? null;
        $this->container['recipientId'] = $data['recipientId'] ?? null;
        $this->container['recipientType'] = $data['recipientType'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['eTag'] = $data['eTag'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets embedded
     *
     * @return array<string,object>|null
     */
    public function getEmbedded()
    {
        return $this->container['embedded'];
    }

    /**
     * Sets embedded
     *
     * @param array<string,object>|null $embedded embedded
     *
     * @return self
     */
    public function setEmbedded($embedded)
    {
        $this->container['embedded'] = $embedded;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier of the task
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created The date and time when the task was created
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified The date and time when the task was last modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets activates
     *
     * @return \DateTime|null
     */
    public function getActivates()
    {
        return $this->container['activates'];
    }

    /**
     * Sets activates
     *
     * @param \DateTime|null $activates The date the task becomes active
     *
     * @return self
     */
    public function setActivates($activates)
    {
        $this->container['activates'] = $activates;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return \DateTime|null
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param \DateTime|null $completed The date the task was completed
     *
     * @return self
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets typeId
     *
     * @return string|null
     */
    public function getTypeId()
    {
        return $this->container['typeId'];
    }

    /**
     * Sets typeId
     *
     * @param string|null $typeId The unique identifier of the task type
     *
     * @return self
     */
    public function setTypeId($typeId)
    {
        $this->container['typeId'] = $typeId;

        return $this;
    }

    /**
     * Gets senderId
     *
     * @return string|null
     */
    public function getSenderId()
    {
        return $this->container['senderId'];
    }

    /**
     * Sets senderId
     *
     * @param string|null $senderId The unique identifer of the negotiator that created the task
     *
     * @return self
     */
    public function setSenderId($senderId)
    {
        $this->container['senderId'] = $senderId;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text The textual contents of the task or message
     *
     * @return self
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets landlordId
     *
     * @return string|null
     */
    public function getLandlordId()
    {
        return $this->container['landlordId'];
    }

    /**
     * Sets landlordId
     *
     * @param string|null $landlordId The unique identifier of the landlord the task is associated to
     *
     * @return self
     */
    public function setLandlordId($landlordId)
    {
        $this->container['landlordId'] = $landlordId;

        return $this;
    }

    /**
     * Gets propertyId
     *
     * @return string|null
     */
    public function getPropertyId()
    {
        return $this->container['propertyId'];
    }

    /**
     * Sets propertyId
     *
     * @param string|null $propertyId The unique identifier of the property the task is associated to
     *
     * @return self
     */
    public function setPropertyId($propertyId)
    {
        $this->container['propertyId'] = $propertyId;

        return $this;
    }

    /**
     * Gets applicantId
     *
     * @return string|null
     */
    public function getApplicantId()
    {
        return $this->container['applicantId'];
    }

    /**
     * Sets applicantId
     *
     * @param string|null $applicantId The unique identifier of the applicant the task is associated to
     *
     * @return self
     */
    public function setApplicantId($applicantId)
    {
        $this->container['applicantId'] = $applicantId;

        return $this;
    }

    /**
     * Gets tenancyId
     *
     * @return string|null
     */
    public function getTenancyId()
    {
        return $this->container['tenancyId'];
    }

    /**
     * Sets tenancyId
     *
     * @param string|null $tenancyId The unique identifier of the tenancy the task is associated to
     *
     * @return self
     */
    public function setTenancyId($tenancyId)
    {
        $this->container['tenancyId'] = $tenancyId;

        return $this;
    }

    /**
     * Gets contactId
     *
     * @return string|null
     */
    public function getContactId()
    {
        return $this->container['contactId'];
    }

    /**
     * Sets contactId
     *
     * @param string|null $contactId The unique identifier of the contact the task is associated to
     *
     * @return self
     */
    public function setContactId($contactId)
    {
        $this->container['contactId'] = $contactId;

        return $this;
    }

    /**
     * Gets recipientId
     *
     * @return string|null
     */
    public function getRecipientId()
    {
        return $this->container['recipientId'];
    }

    /**
     * Sets recipientId
     *
     * @param string|null $recipientId The unique identifier of the negotiator or office the task is being sent to
     *
     * @return self
     */
    public function setRecipientId($recipientId)
    {
        $this->container['recipientId'] = $recipientId;

        return $this;
    }

    /**
     * Gets recipientType
     *
     * @return string|null
     */
    public function getRecipientType()
    {
        return $this->container['recipientType'];
    }

    /**
     * Sets recipientType
     *
     * @param string|null $recipientType The type of the recipient (office/negotiator)
     *
     * @return self
     */
    public function setRecipientType($recipientType)
    {
        $this->container['recipientType'] = $recipientType;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,object>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,object>|null $metadata App specific metadata that has been set against the task
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets eTag
     *
     * @return string|null
     */
    public function getETag()
    {
        return $this->container['eTag'];
    }

    /**
     * Sets eTag
     *
     * @param string|null $eTag The ETag for the current version of the task. Used for managing update concurrency
     *
     * @return self
     */
    public function setETag($eTag)
    {
        $this->container['eTag'] = $eTag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


