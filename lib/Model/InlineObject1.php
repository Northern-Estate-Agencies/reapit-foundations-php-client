<?php
/**
 * InlineObject1
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foundations Interactive API Explorer
 *
 * <p>Technical documentation for the Reapit Foundations REST API endpoints. This tool is interactive and provides instant access to data hosted in our <strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation#sandbox-mode\">sandbox environment</a> </strong>with <strong>authentication</strong> and <strong>versioning</strong> headers pre-populated. Example requests and responses are shown by default but you can switch to view a fully documented schema - look for the&nbsp;<strong>model</strong> link.</p> <p>* To begin developing with the platform, consult our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation\">documentation</a></strong>&nbsp;<br />* To report a bug or request a new feature, see our <strong><a href=\"https://developers.reapit.cloud/help\">help pages</a>&nbsp;<br /></strong>* For information on terminology, see our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/platform-glossary\">glossary</a></strong>&nbsp;<br />* Our APIs are located at&nbsp;<strong>https://platform.reapit.cloud<br /></strong>* The current API version is&nbsp;<strong>2020-01-31<br /></strong></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NorthernEstateAgencies\ReapitFoundationsClient\Model;

use \ArrayAccess;
use \NorthernEstateAgencies\ReapitFoundationsClient\ObjectSerializer;

/**
 * InlineObject1 Class Doc Comment
 *
 * @category Class
 * @description Request body used to update an existing applicant
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineObject1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'marketingMode' => 'string',
        'active' => 'bool',
        'notes' => 'string',
        'lastCall' => '\DateTime',
        'nextCall' => '\DateTime',
        'departmentId' => 'string',
        'solicitorId' => 'string',
        'type' => 'string[]',
        'style' => 'string[]',
        'situation' => 'string[]',
        'parking' => 'string[]',
        'age' => 'string[]',
        'locality' => 'string[]',
        'bedroomsMin' => 'int',
        'bedroomsMax' => 'int',
        'receptionsMin' => 'int',
        'receptionsMax' => 'int',
        'bathroomsMin' => 'int',
        'bathroomsMax' => 'int',
        'locationType' => 'string',
        'locationOptions' => 'string[]',
        'buying' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Buying',
        'renting' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\ApplicantsIdRenting',
        'externalArea' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200ExternalArea',
        'internalArea' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200InternalArea',
        'source' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Source',
        'officeIds' => 'string[]',
        'negotiatorIds' => 'string[]',
        'metadata' => 'array<string,object>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'marketingMode' => null,
        'active' => null,
        'notes' => null,
        'lastCall' => 'date',
        'nextCall' => 'date',
        'departmentId' => null,
        'solicitorId' => null,
        'type' => null,
        'style' => null,
        'situation' => null,
        'parking' => null,
        'age' => null,
        'locality' => null,
        'bedroomsMin' => 'int32',
        'bedroomsMax' => 'int32',
        'receptionsMin' => 'int32',
        'receptionsMax' => 'int32',
        'bathroomsMin' => 'int32',
        'bathroomsMax' => 'int32',
        'locationType' => null,
        'locationOptions' => null,
        'buying' => null,
        'renting' => null,
        'externalArea' => null,
        'internalArea' => null,
        'source' => null,
        'officeIds' => null,
        'negotiatorIds' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'marketingMode' => 'marketingMode',
        'active' => 'active',
        'notes' => 'notes',
        'lastCall' => 'lastCall',
        'nextCall' => 'nextCall',
        'departmentId' => 'departmentId',
        'solicitorId' => 'solicitorId',
        'type' => 'type',
        'style' => 'style',
        'situation' => 'situation',
        'parking' => 'parking',
        'age' => 'age',
        'locality' => 'locality',
        'bedroomsMin' => 'bedroomsMin',
        'bedroomsMax' => 'bedroomsMax',
        'receptionsMin' => 'receptionsMin',
        'receptionsMax' => 'receptionsMax',
        'bathroomsMin' => 'bathroomsMin',
        'bathroomsMax' => 'bathroomsMax',
        'locationType' => 'locationType',
        'locationOptions' => 'locationOptions',
        'buying' => 'buying',
        'renting' => 'renting',
        'externalArea' => 'externalArea',
        'internalArea' => 'internalArea',
        'source' => 'source',
        'officeIds' => 'officeIds',
        'negotiatorIds' => 'negotiatorIds',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'marketingMode' => 'setMarketingMode',
        'active' => 'setActive',
        'notes' => 'setNotes',
        'lastCall' => 'setLastCall',
        'nextCall' => 'setNextCall',
        'departmentId' => 'setDepartmentId',
        'solicitorId' => 'setSolicitorId',
        'type' => 'setType',
        'style' => 'setStyle',
        'situation' => 'setSituation',
        'parking' => 'setParking',
        'age' => 'setAge',
        'locality' => 'setLocality',
        'bedroomsMin' => 'setBedroomsMin',
        'bedroomsMax' => 'setBedroomsMax',
        'receptionsMin' => 'setReceptionsMin',
        'receptionsMax' => 'setReceptionsMax',
        'bathroomsMin' => 'setBathroomsMin',
        'bathroomsMax' => 'setBathroomsMax',
        'locationType' => 'setLocationType',
        'locationOptions' => 'setLocationOptions',
        'buying' => 'setBuying',
        'renting' => 'setRenting',
        'externalArea' => 'setExternalArea',
        'internalArea' => 'setInternalArea',
        'source' => 'setSource',
        'officeIds' => 'setOfficeIds',
        'negotiatorIds' => 'setNegotiatorIds',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'marketingMode' => 'getMarketingMode',
        'active' => 'getActive',
        'notes' => 'getNotes',
        'lastCall' => 'getLastCall',
        'nextCall' => 'getNextCall',
        'departmentId' => 'getDepartmentId',
        'solicitorId' => 'getSolicitorId',
        'type' => 'getType',
        'style' => 'getStyle',
        'situation' => 'getSituation',
        'parking' => 'getParking',
        'age' => 'getAge',
        'locality' => 'getLocality',
        'bedroomsMin' => 'getBedroomsMin',
        'bedroomsMax' => 'getBedroomsMax',
        'receptionsMin' => 'getReceptionsMin',
        'receptionsMax' => 'getReceptionsMax',
        'bathroomsMin' => 'getBathroomsMin',
        'bathroomsMax' => 'getBathroomsMax',
        'locationType' => 'getLocationType',
        'locationOptions' => 'getLocationOptions',
        'buying' => 'getBuying',
        'renting' => 'getRenting',
        'externalArea' => 'getExternalArea',
        'internalArea' => 'getInternalArea',
        'source' => 'getSource',
        'officeIds' => 'getOfficeIds',
        'negotiatorIds' => 'getNegotiatorIds',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['marketingMode'] = $data['marketingMode'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['notes'] = $data['notes'] ?? null;
        $this->container['lastCall'] = $data['lastCall'] ?? null;
        $this->container['nextCall'] = $data['nextCall'] ?? null;
        $this->container['departmentId'] = $data['departmentId'] ?? null;
        $this->container['solicitorId'] = $data['solicitorId'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['style'] = $data['style'] ?? null;
        $this->container['situation'] = $data['situation'] ?? null;
        $this->container['parking'] = $data['parking'] ?? null;
        $this->container['age'] = $data['age'] ?? null;
        $this->container['locality'] = $data['locality'] ?? null;
        $this->container['bedroomsMin'] = $data['bedroomsMin'] ?? null;
        $this->container['bedroomsMax'] = $data['bedroomsMax'] ?? null;
        $this->container['receptionsMin'] = $data['receptionsMin'] ?? null;
        $this->container['receptionsMax'] = $data['receptionsMax'] ?? null;
        $this->container['bathroomsMin'] = $data['bathroomsMin'] ?? null;
        $this->container['bathroomsMax'] = $data['bathroomsMax'] ?? null;
        $this->container['locationType'] = $data['locationType'] ?? null;
        $this->container['locationOptions'] = $data['locationOptions'] ?? null;
        $this->container['buying'] = $data['buying'] ?? null;
        $this->container['renting'] = $data['renting'] ?? null;
        $this->container['externalArea'] = $data['externalArea'] ?? null;
        $this->container['internalArea'] = $data['internalArea'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['officeIds'] = $data['officeIds'] ?? null;
        $this->container['negotiatorIds'] = $data['negotiatorIds'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets marketingMode
     *
     * @return string|null
     */
    public function getMarketingMode()
    {
        return $this->container['marketingMode'];
    }

    /**
     * Sets marketingMode
     *
     * @param string|null $marketingMode Indicates whether the applicant is look to buy or rent a property (buying/renting)
     *
     * @return self
     */
    public function setMarketingMode($marketingMode)
    {
        $this->container['marketingMode'] = $marketingMode;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active A flag determining whether or not the applicant is actively looking for a property
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes A free text field describing any adhoc buying or renting requirements
     *
     * @return self
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets lastCall
     *
     * @return \DateTime|null
     */
    public function getLastCall()
    {
        return $this->container['lastCall'];
    }

    /**
     * Sets lastCall
     *
     * @param \DateTime|null $lastCall The date when the applicant was last contacted
     *
     * @return self
     */
    public function setLastCall($lastCall)
    {
        $this->container['lastCall'] = $lastCall;

        return $this;
    }

    /**
     * Gets nextCall
     *
     * @return \DateTime|null
     */
    public function getNextCall()
    {
        return $this->container['nextCall'];
    }

    /**
     * Sets nextCall
     *
     * @param \DateTime|null $nextCall The date when the applicant is next due to be contacted
     *
     * @return self
     */
    public function setNextCall($nextCall)
    {
        $this->container['nextCall'] = $nextCall;

        return $this;
    }

    /**
     * Gets departmentId
     *
     * @return string|null
     */
    public function getDepartmentId()
    {
        return $this->container['departmentId'];
    }

    /**
     * Sets departmentId
     *
     * @param string|null $departmentId The unique identifier of the department that the applicant requirements are associated with. The applicant will only match to properties with the same value
     *
     * @return self
     */
    public function setDepartmentId($departmentId)
    {
        $this->container['departmentId'] = $departmentId;

        return $this;
    }

    /**
     * Gets solicitorId
     *
     * @return string|null
     */
    public function getSolicitorId()
    {
        return $this->container['solicitorId'];
    }

    /**
     * Sets solicitorId
     *
     * @param string|null $solicitorId The unique identifier of the solicitor associated to the applicant
     *
     * @return self
     */
    public function setSolicitorId($solicitorId)
    {
        $this->container['solicitorId'] = $solicitorId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string[]|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string[]|null $type The applicant's property type requirements (eg house, bungalow, land), as defined by the applicant's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string[]|null
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string[]|null $style The applicant's property style requirements (eg detached, semiDetached), as defined by the applicant's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets situation
     *
     * @return string[]|null
     */
    public function getSituation()
    {
        return $this->container['situation'];
    }

    /**
     * Sets situation
     *
     * @param string[]|null $situation The applicant's requirements for other aspects of prospective properties - such as outside space - as defined by the applicant's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setSituation($situation)
    {
        $this->container['situation'] = $situation;

        return $this;
    }

    /**
     * Gets parking
     *
     * @return string[]|null
     */
    public function getParking()
    {
        return $this->container['parking'];
    }

    /**
     * Sets parking
     *
     * @param string[]|null $parking The applicant's parking requirements (eg garage), as defined by the applicant's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setParking($parking)
    {
        $this->container['parking'] = $parking;

        return $this;
    }

    /**
     * Gets age
     *
     * @return string[]|null
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param string[]|null $age The applicant's property age requirements (eg new, period), as defined by the applicant's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string[]|null
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string[]|null $locality The applicant's general property location requirements (eg rural, townCity), as defined by the applicant's [department](https://foundations-documentation.reapit.cloud/platform-glossary#department)
     *
     * @return self
     */
    public function setLocality($locality)
    {
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets bedroomsMin
     *
     * @return int|null
     */
    public function getBedroomsMin()
    {
        return $this->container['bedroomsMin'];
    }

    /**
     * Sets bedroomsMin
     *
     * @param int|null $bedroomsMin The minimum number of bedrooms the applicant requires
     *
     * @return self
     */
    public function setBedroomsMin($bedroomsMin)
    {
        $this->container['bedroomsMin'] = $bedroomsMin;

        return $this;
    }

    /**
     * Gets bedroomsMax
     *
     * @return int|null
     */
    public function getBedroomsMax()
    {
        return $this->container['bedroomsMax'];
    }

    /**
     * Sets bedroomsMax
     *
     * @param int|null $bedroomsMax The maximum number of bedrooms the applicant requires
     *
     * @return self
     */
    public function setBedroomsMax($bedroomsMax)
    {
        $this->container['bedroomsMax'] = $bedroomsMax;

        return $this;
    }

    /**
     * Gets receptionsMin
     *
     * @return int|null
     */
    public function getReceptionsMin()
    {
        return $this->container['receptionsMin'];
    }

    /**
     * Sets receptionsMin
     *
     * @param int|null $receptionsMin The minimum number of reception rooms the applicant requires
     *
     * @return self
     */
    public function setReceptionsMin($receptionsMin)
    {
        $this->container['receptionsMin'] = $receptionsMin;

        return $this;
    }

    /**
     * Gets receptionsMax
     *
     * @return int|null
     */
    public function getReceptionsMax()
    {
        return $this->container['receptionsMax'];
    }

    /**
     * Sets receptionsMax
     *
     * @param int|null $receptionsMax The maximum number of reception rooms the applicant requires
     *
     * @return self
     */
    public function setReceptionsMax($receptionsMax)
    {
        $this->container['receptionsMax'] = $receptionsMax;

        return $this;
    }

    /**
     * Gets bathroomsMin
     *
     * @return int|null
     */
    public function getBathroomsMin()
    {
        return $this->container['bathroomsMin'];
    }

    /**
     * Sets bathroomsMin
     *
     * @param int|null $bathroomsMin The minimum number of bathrooms the applicant requires
     *
     * @return self
     */
    public function setBathroomsMin($bathroomsMin)
    {
        $this->container['bathroomsMin'] = $bathroomsMin;

        return $this;
    }

    /**
     * Gets bathroomsMax
     *
     * @return int|null
     */
    public function getBathroomsMax()
    {
        return $this->container['bathroomsMax'];
    }

    /**
     * Sets bathroomsMax
     *
     * @param int|null $bathroomsMax The maximum number of bathrooms the applicant requires
     *
     * @return self
     */
    public function setBathroomsMax($bathroomsMax)
    {
        $this->container['bathroomsMax'] = $bathroomsMax;

        return $this;
    }

    /**
     * Gets locationType
     *
     * @return string|null
     */
    public function getLocationType()
    {
        return $this->container['locationType'];
    }

    /**
     * Sets locationType
     *
     * @param string|null $locationType The applicant's location type (areas/addresses/none)
     *
     * @return self
     */
    public function setLocationType($locationType)
    {
        $this->container['locationType'] = $locationType;

        return $this;
    }

    /**
     * Gets locationOptions
     *
     * @return string[]|null
     */
    public function getLocationOptions()
    {
        return $this->container['locationOptions'];
    }

    /**
     * Sets locationOptions
     *
     * @param string[]|null $locationOptions The applicant's location options
     *
     * @return self
     */
    public function setLocationOptions($locationOptions)
    {
        $this->container['locationOptions'] = $locationOptions;

        return $this;
    }

    /**
     * Gets buying
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Buying|null
     */
    public function getBuying()
    {
        return $this->container['buying'];
    }

    /**
     * Sets buying
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Buying|null $buying buying
     *
     * @return self
     */
    public function setBuying($buying)
    {
        $this->container['buying'] = $buying;

        return $this;
    }

    /**
     * Gets renting
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\ApplicantsIdRenting|null
     */
    public function getRenting()
    {
        return $this->container['renting'];
    }

    /**
     * Sets renting
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\ApplicantsIdRenting|null $renting renting
     *
     * @return self
     */
    public function setRenting($renting)
    {
        $this->container['renting'] = $renting;

        return $this;
    }

    /**
     * Gets externalArea
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200ExternalArea|null
     */
    public function getExternalArea()
    {
        return $this->container['externalArea'];
    }

    /**
     * Sets externalArea
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200ExternalArea|null $externalArea externalArea
     *
     * @return self
     */
    public function setExternalArea($externalArea)
    {
        $this->container['externalArea'] = $externalArea;

        return $this;
    }

    /**
     * Gets internalArea
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200InternalArea|null
     */
    public function getInternalArea()
    {
        return $this->container['internalArea'];
    }

    /**
     * Sets internalArea
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200InternalArea|null $internalArea internalArea
     *
     * @return self
     */
    public function setInternalArea($internalArea)
    {
        $this->container['internalArea'] = $internalArea;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Source|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Source|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets officeIds
     *
     * @return string[]|null
     */
    public function getOfficeIds()
    {
        return $this->container['officeIds'];
    }

    /**
     * Sets officeIds
     *
     * @param string[]|null $officeIds A collection of unique identifiers of offices attached to the applicant. The first item in the collection is considered the primary office
     *
     * @return self
     */
    public function setOfficeIds($officeIds)
    {
        $this->container['officeIds'] = $officeIds;

        return $this;
    }

    /**
     * Gets negotiatorIds
     *
     * @return string[]|null
     */
    public function getNegotiatorIds()
    {
        return $this->container['negotiatorIds'];
    }

    /**
     * Sets negotiatorIds
     *
     * @param string[]|null $negotiatorIds A collection of unique identifiers of negotiators attached to the applicant. The first item in the collection is considered the primary negotiator
     *
     * @return self
     */
    public function setNegotiatorIds($negotiatorIds)
    {
        $this->container['negotiatorIds'] = $negotiatorIds;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,object>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,object>|null $metadata App specific metadata to set against the applicant
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


