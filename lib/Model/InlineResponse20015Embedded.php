<?php
/**
 * InlineResponse20015Embedded
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foundations Interactive API Explorer
 *
 * <p>Technical documentation for the Reapit Foundations REST API endpoints. This tool is interactive and provides instant access to data hosted in our <strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation#sandbox-mode\">sandbox environment</a> </strong>with <strong>authentication</strong> and <strong>versioning</strong> headers pre-populated. Example requests and responses are shown by default but you can switch to view a fully documented schema - look for the&nbsp;<strong>model</strong> link.</p> <p>* To begin developing with the platform, consult our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation\">documentation</a></strong>&nbsp;<br />* To report a bug or request a new feature, see our <strong><a href=\"https://developers.reapit.cloud/help\">help pages</a>&nbsp;<br /></strong>* For information on terminology, see our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/platform-glossary\">glossary</a></strong>&nbsp;<br />* Our APIs are located at&nbsp;<strong>https://platform.reapit.cloud<br /></strong>* The current API version is&nbsp;<strong>2020-01-31<br /></strong></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NorthernEstateAgencies\ReapitFoundationsClient\Model;

use \ArrayAccess;
use \NorthernEstateAgencies\ReapitFoundationsClient\ObjectSerializer;

/**
 * InlineResponse20015Embedded Class Doc Comment
 *
 * @category Class
 * @description Representation of an enquiry
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20015Embedded implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_15__embedded';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'links' => 'array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>',
        'embedded' => 'array<string,object>',
        'id' => 'int',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'title' => 'string',
        'forename' => 'string',
        'surname' => 'string',
        'enquiryType' => 'string',
        'message' => 'string',
        'status' => 'string',
        'marketingConsent' => 'string',
        'position' => 'string',
        'officeId' => 'string',
        'sourceName' => 'string',
        'homePhone' => 'string',
        'workPhone' => 'string',
        'mobilePhone' => 'string',
        'email' => 'string',
        'address' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200PrimaryAddress',
        'propertyIds' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'links' => null,
        'embedded' => null,
        'id' => 'int32',
        'created' => 'date-time',
        'modified' => 'date-time',
        'title' => null,
        'forename' => null,
        'surname' => null,
        'enquiryType' => null,
        'message' => null,
        'status' => null,
        'marketingConsent' => null,
        'position' => null,
        'officeId' => null,
        'sourceName' => null,
        'homePhone' => null,
        'workPhone' => null,
        'mobilePhone' => null,
        'email' => null,
        'address' => null,
        'propertyIds' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'embedded' => '_embedded',
        'id' => 'id',
        'created' => 'created',
        'modified' => 'modified',
        'title' => 'title',
        'forename' => 'forename',
        'surname' => 'surname',
        'enquiryType' => 'enquiryType',
        'message' => 'message',
        'status' => 'status',
        'marketingConsent' => 'marketingConsent',
        'position' => 'position',
        'officeId' => 'officeId',
        'sourceName' => 'sourceName',
        'homePhone' => 'homePhone',
        'workPhone' => 'workPhone',
        'mobilePhone' => 'mobilePhone',
        'email' => 'email',
        'address' => 'address',
        'propertyIds' => 'propertyIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'embedded' => 'setEmbedded',
        'id' => 'setId',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'title' => 'setTitle',
        'forename' => 'setForename',
        'surname' => 'setSurname',
        'enquiryType' => 'setEnquiryType',
        'message' => 'setMessage',
        'status' => 'setStatus',
        'marketingConsent' => 'setMarketingConsent',
        'position' => 'setPosition',
        'officeId' => 'setOfficeId',
        'sourceName' => 'setSourceName',
        'homePhone' => 'setHomePhone',
        'workPhone' => 'setWorkPhone',
        'mobilePhone' => 'setMobilePhone',
        'email' => 'setEmail',
        'address' => 'setAddress',
        'propertyIds' => 'setPropertyIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'embedded' => 'getEmbedded',
        'id' => 'getId',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'title' => 'getTitle',
        'forename' => 'getForename',
        'surname' => 'getSurname',
        'enquiryType' => 'getEnquiryType',
        'message' => 'getMessage',
        'status' => 'getStatus',
        'marketingConsent' => 'getMarketingConsent',
        'position' => 'getPosition',
        'officeId' => 'getOfficeId',
        'sourceName' => 'getSourceName',
        'homePhone' => 'getHomePhone',
        'workPhone' => 'getWorkPhone',
        'mobilePhone' => 'getMobilePhone',
        'email' => 'getEmail',
        'address' => 'getAddress',
        'propertyIds' => 'getPropertyIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = $data['links'] ?? null;
        $this->container['embedded'] = $data['embedded'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['modified'] = $data['modified'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['forename'] = $data['forename'] ?? null;
        $this->container['surname'] = $data['surname'] ?? null;
        $this->container['enquiryType'] = $data['enquiryType'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['marketingConsent'] = $data['marketingConsent'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['officeId'] = $data['officeId'] ?? null;
        $this->container['sourceName'] = $data['sourceName'] ?? null;
        $this->container['homePhone'] = $data['homePhone'] ?? null;
        $this->container['workPhone'] = $data['workPhone'] ?? null;
        $this->container['mobilePhone'] = $data['mobilePhone'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['propertyIds'] = $data['propertyIds'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets embedded
     *
     * @return array<string,object>|null
     */
    public function getEmbedded()
    {
        return $this->container['embedded'];
    }

    /**
     * Sets embedded
     *
     * @param array<string,object>|null $embedded embedded
     *
     * @return self
     */
    public function setEmbedded($embedded)
    {
        $this->container['embedded'] = $embedded;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique identifier of the enquiry
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created The date and time when the enquiry was created
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified The date and time when the enquiry was last modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the individual making the enquiry
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets forename
     *
     * @return string|null
     */
    public function getForename()
    {
        return $this->container['forename'];
    }

    /**
     * Sets forename
     *
     * @param string|null $forename The forename of the individual making the enquiry
     *
     * @return self
     */
    public function setForename($forename)
    {
        $this->container['forename'] = $forename;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname The surname of the individual making the enquiry
     *
     * @return self
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets enquiryType
     *
     * @return string|null
     */
    public function getEnquiryType()
    {
        return $this->container['enquiryType'];
    }

    /**
     * Sets enquiryType
     *
     * @param string|null $enquiryType The type of enquiry. Enquiries can created for applicants interested in buying/renting, as well as prospective vendors and landlords (salesApplicant/lettingsApplicant/salesProperty/lettingsProperty)
     *
     * @return self
     */
    public function setEnquiryType($enquiryType)
    {
        $this->container['enquiryType'] = $enquiryType;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Textual information about the nature of the enquiry - usually the message text from the individual making the enquiry
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the enquiry (pending/added/rejected/alreadyExists/duplicateEntry/spam)
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets marketingConsent
     *
     * @return string|null
     */
    public function getMarketingConsent()
    {
        return $this->container['marketingConsent'];
    }

    /**
     * Sets marketingConsent
     *
     * @param string|null $marketingConsent The marketing consent status of the individual making the enquiry (grant/deny/notAsked)
     *
     * @return self
     */
    public function setMarketingConsent($marketingConsent)
    {
        $this->container['marketingConsent'] = $marketingConsent;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string|null $position The selling position of the individual making the enquiry (renting/instructedThisAgent/instructedOtherAgent/privateSale/notOnMarket)
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets officeId
     *
     * @return string|null
     */
    public function getOfficeId()
    {
        return $this->container['officeId'];
    }

    /**
     * Sets officeId
     *
     * @param string|null $officeId The unique identifier of the office related to the enquiry
     *
     * @return self
     */
    public function setOfficeId($officeId)
    {
        $this->container['officeId'] = $officeId;

        return $this;
    }

    /**
     * Gets sourceName
     *
     * @return string|null
     */
    public function getSourceName()
    {
        return $this->container['sourceName'];
    }

    /**
     * Sets sourceName
     *
     * @param string|null $sourceName The name of the source that the enquiry was generated by
     *
     * @return self
     */
    public function setSourceName($sourceName)
    {
        $this->container['sourceName'] = $sourceName;

        return $this;
    }

    /**
     * Gets homePhone
     *
     * @return string|null
     */
    public function getHomePhone()
    {
        return $this->container['homePhone'];
    }

    /**
     * Sets homePhone
     *
     * @param string|null $homePhone The home phone number of the individual making the enquiry
     *
     * @return self
     */
    public function setHomePhone($homePhone)
    {
        $this->container['homePhone'] = $homePhone;

        return $this;
    }

    /**
     * Gets workPhone
     *
     * @return string|null
     */
    public function getWorkPhone()
    {
        return $this->container['workPhone'];
    }

    /**
     * Sets workPhone
     *
     * @param string|null $workPhone The work phone number of the individual making the enquiry
     *
     * @return self
     */
    public function setWorkPhone($workPhone)
    {
        $this->container['workPhone'] = $workPhone;

        return $this;
    }

    /**
     * Gets mobilePhone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobilePhone'];
    }

    /**
     * Sets mobilePhone
     *
     * @param string|null $mobilePhone The mobile phone number of the individual making the enquiry
     *
     * @return self
     */
    public function setMobilePhone($mobilePhone)
    {
        $this->container['mobilePhone'] = $mobilePhone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email of the individual making the enquiry
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200PrimaryAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200PrimaryAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets propertyIds
     *
     * @return string[]|null
     */
    public function getPropertyIds()
    {
        return $this->container['propertyIds'];
    }

    /**
     * Sets propertyIds
     *
     * @param string[]|null $propertyIds A list of unique property identifiers that this enquiry relates to. Used to indicate the properties that a sales or lettings applicant has expressed an interest in
     *
     * @return self
     */
    public function setPropertyIds($propertyIds)
    {
        $this->container['propertyIds'] = $propertyIds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


