<?php
/**
 * CompanyModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foundations Interactive API Explorer
 *
 * <p>Technical documentation for the Reapit Foundations REST API endpoints. This tool is interactive and provides instant access to data hosted in our <strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation#sandbox-mode\">sandbox environment</a> </strong>with <strong>authentication</strong> and <strong>versioning</strong> headers pre-populated. Example requests and responses are shown by default but you can switch to view a fully documented schema - look for the&nbsp;<strong>model</strong> link.</p> <p>* To begin developing with the platform, consult our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation\">documentation</a></strong>&nbsp;<br />* To report a bug or request a new feature, see our <strong><a href=\"https://developers.reapit.cloud/help\">help pages</a>&nbsp;<br /></strong>* For information on terminology, see our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/platform-glossary\">glossary</a></strong>&nbsp;<br />* Our APIs are located at&nbsp;<strong>https://platform.reapit.cloud<br /></strong>* The current API version is&nbsp;<strong>2020-01-31<br /></strong></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NorthernEstateAgencies\ReapitFoundationsClient\Model;

use \ArrayAccess;
use \NorthernEstateAgencies\ReapitFoundationsClient\ObjectSerializer;

/**
 * CompanyModel Class Doc Comment
 *
 * @category Class
 * @description Representation of a company
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CompanyModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'links' => 'array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>',
        'embedded' => 'array<string,object>',
        'id' => 'string',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'name' => 'string',
        'branch' => 'string',
        'notes' => 'string',
        'active' => 'bool',
        'vatRegistered' => 'bool',
        'typeIds' => 'string[]',
        'supplierTypeId' => 'string',
        'workPhone' => 'string',
        'mobilePhone' => 'string',
        'email' => 'string',
        'archivedOn' => '\DateTime',
        'fromArchive' => 'bool',
        'address' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse2004Address',
        'metadata' => 'array<string,object>',
        'eTag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'links' => null,
        'embedded' => null,
        'id' => null,
        'created' => 'date-time',
        'modified' => 'date-time',
        'name' => null,
        'branch' => null,
        'notes' => null,
        'active' => null,
        'vatRegistered' => null,
        'typeIds' => null,
        'supplierTypeId' => null,
        'workPhone' => null,
        'mobilePhone' => null,
        'email' => null,
        'archivedOn' => 'date-time',
        'fromArchive' => null,
        'address' => null,
        'metadata' => null,
        'eTag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'embedded' => '_embedded',
        'id' => 'id',
        'created' => 'created',
        'modified' => 'modified',
        'name' => 'name',
        'branch' => 'branch',
        'notes' => 'notes',
        'active' => 'active',
        'vatRegistered' => 'vatRegistered',
        'typeIds' => 'typeIds',
        'supplierTypeId' => 'supplierTypeId',
        'workPhone' => 'workPhone',
        'mobilePhone' => 'mobilePhone',
        'email' => 'email',
        'archivedOn' => 'archivedOn',
        'fromArchive' => 'fromArchive',
        'address' => 'address',
        'metadata' => 'metadata',
        'eTag' => '_eTag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'embedded' => 'setEmbedded',
        'id' => 'setId',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'name' => 'setName',
        'branch' => 'setBranch',
        'notes' => 'setNotes',
        'active' => 'setActive',
        'vatRegistered' => 'setVatRegistered',
        'typeIds' => 'setTypeIds',
        'supplierTypeId' => 'setSupplierTypeId',
        'workPhone' => 'setWorkPhone',
        'mobilePhone' => 'setMobilePhone',
        'email' => 'setEmail',
        'archivedOn' => 'setArchivedOn',
        'fromArchive' => 'setFromArchive',
        'address' => 'setAddress',
        'metadata' => 'setMetadata',
        'eTag' => 'setETag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'embedded' => 'getEmbedded',
        'id' => 'getId',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'name' => 'getName',
        'branch' => 'getBranch',
        'notes' => 'getNotes',
        'active' => 'getActive',
        'vatRegistered' => 'getVatRegistered',
        'typeIds' => 'getTypeIds',
        'supplierTypeId' => 'getSupplierTypeId',
        'workPhone' => 'getWorkPhone',
        'mobilePhone' => 'getMobilePhone',
        'email' => 'getEmail',
        'archivedOn' => 'getArchivedOn',
        'fromArchive' => 'getFromArchive',
        'address' => 'getAddress',
        'metadata' => 'getMetadata',
        'eTag' => 'getETag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = $data['links'] ?? null;
        $this->container['embedded'] = $data['embedded'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['modified'] = $data['modified'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['branch'] = $data['branch'] ?? null;
        $this->container['notes'] = $data['notes'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['vatRegistered'] = $data['vatRegistered'] ?? null;
        $this->container['typeIds'] = $data['typeIds'] ?? null;
        $this->container['supplierTypeId'] = $data['supplierTypeId'] ?? null;
        $this->container['workPhone'] = $data['workPhone'] ?? null;
        $this->container['mobilePhone'] = $data['mobilePhone'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['archivedOn'] = $data['archivedOn'] ?? null;
        $this->container['fromArchive'] = $data['fromArchive'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['eTag'] = $data['eTag'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets embedded
     *
     * @return array<string,object>|null
     */
    public function getEmbedded()
    {
        return $this->container['embedded'];
    }

    /**
     * Sets embedded
     *
     * @param array<string,object>|null $embedded embedded
     *
     * @return self
     */
    public function setEmbedded($embedded)
    {
        $this->container['embedded'] = $embedded;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier of the company
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created The date and time when the company was created
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified The date and time when the company was last modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the company
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string|null
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string|null $branch The branch name of the company
     *
     * @return self
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes A free text field containing notes that describe the company's business or service offering
     *
     * @return self
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active A flag determining whether or not the company is currently active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets vatRegistered
     *
     * @return bool|null
     */
    public function getVatRegistered()
    {
        return $this->container['vatRegistered'];
    }

    /**
     * Sets vatRegistered
     *
     * @param bool|null $vatRegistered A flag determining whether or not the company is VAT registered
     *
     * @return self
     */
    public function setVatRegistered($vatRegistered)
    {
        $this->container['vatRegistered'] = $vatRegistered;

        return $this;
    }

    /**
     * Gets typeIds
     *
     * @return string[]|null
     */
    public function getTypeIds()
    {
        return $this->container['typeIds'];
    }

    /**
     * Sets typeIds
     *
     * @param string[]|null $typeIds A collection of unique identifiers of company types that categorise the type of business the company operates
     *
     * @return self
     */
    public function setTypeIds($typeIds)
    {
        $this->container['typeIds'] = $typeIds;

        return $this;
    }

    /**
     * Gets supplierTypeId
     *
     * @return string|null
     */
    public function getSupplierTypeId()
    {
        return $this->container['supplierTypeId'];
    }

    /**
     * Sets supplierTypeId
     *
     * @param string|null $supplierTypeId The unique identifier of a supplier type, if the company is a supplier
     *
     * @return self
     */
    public function setSupplierTypeId($supplierTypeId)
    {
        $this->container['supplierTypeId'] = $supplierTypeId;

        return $this;
    }

    /**
     * Gets workPhone
     *
     * @return string|null
     */
    public function getWorkPhone()
    {
        return $this->container['workPhone'];
    }

    /**
     * Sets workPhone
     *
     * @param string|null $workPhone The work phone number of the company
     *
     * @return self
     */
    public function setWorkPhone($workPhone)
    {
        $this->container['workPhone'] = $workPhone;

        return $this;
    }

    /**
     * Gets mobilePhone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobilePhone'];
    }

    /**
     * Sets mobilePhone
     *
     * @param string|null $mobilePhone The mobile phone number of the company
     *
     * @return self
     */
    public function setMobilePhone($mobilePhone)
    {
        $this->container['mobilePhone'] = $mobilePhone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the company
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets archivedOn
     *
     * @return \DateTime|null
     */
    public function getArchivedOn()
    {
        return $this->container['archivedOn'];
    }

    /**
     * Sets archivedOn
     *
     * @param \DateTime|null $archivedOn The date and time the company was archived
     *
     * @return self
     */
    public function setArchivedOn($archivedOn)
    {
        $this->container['archivedOn'] = $archivedOn;

        return $this;
    }

    /**
     * Gets fromArchive
     *
     * @return bool|null
     */
    public function getFromArchive()
    {
        return $this->container['fromArchive'];
    }

    /**
     * Sets fromArchive
     *
     * @param bool|null $fromArchive A flag determining whether or not the company is archived
     *
     * @return self
     */
    public function setFromArchive($fromArchive)
    {
        $this->container['fromArchive'] = $fromArchive;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse2004Address|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse2004Address|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,object>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,object>|null $metadata App specific metadata that has been set against the company
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets eTag
     *
     * @return string|null
     */
    public function getETag()
    {
        return $this->container['eTag'];
    }

    /**
     * Sets eTag
     *
     * @param string|null $eTag The ETag for the current version of the company. Used for managing update concurrency
     *
     * @return self
     */
    public function setETag($eTag)
    {
        $this->container['eTag'] = $eTag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


