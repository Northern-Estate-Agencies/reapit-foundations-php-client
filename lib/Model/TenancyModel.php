<?php
/**
 * TenancyModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foundations Interactive API Explorer
 *
 * <p>Technical documentation for the Reapit Foundations REST API endpoints. This tool is interactive and provides instant access to data hosted in our <strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation#sandbox-mode\">sandbox environment</a> </strong>with <strong>authentication</strong> and <strong>versioning</strong> headers pre-populated. Example requests and responses are shown by default but you can switch to view a fully documented schema - look for the&nbsp;<strong>model</strong> link.</p> <p>* To begin developing with the platform, consult our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation\">documentation</a></strong>&nbsp;<br />* To report a bug or request a new feature, see our <strong><a href=\"https://developers.reapit.cloud/help\">help pages</a>&nbsp;<br /></strong>* For information on terminology, see our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/platform-glossary\">glossary</a></strong>&nbsp;<br />* Our APIs are located at&nbsp;<strong>https://platform.reapit.cloud<br /></strong>* The current API version is&nbsp;<strong>2020-01-31<br /></strong></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NorthernEstateAgencies\ReapitFoundationsClient\Model;

use \ArrayAccess;
use \NorthernEstateAgencies\ReapitFoundationsClient\ObjectSerializer;

/**
 * TenancyModel Class Doc Comment
 *
 * @category Class
 * @description Representation of a tenancy
 * @package  NorthernEstateAgencies\ReapitFoundationsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TenancyModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TenancyModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'links' => 'array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>',
        'embedded' => 'array<string,object>',
        'id' => 'string',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'status' => 'string',
        'agentRole' => 'string',
        'rent' => 'int',
        'rentFrequency' => 'string',
        'endDateConfirmed' => 'bool',
        'isPeriodic' => 'bool',
        'rentInstalmentsFrequency' => 'string',
        'rentInstalmentsAmount' => 'double',
        'rentInstalmentsStart' => '\DateTime',
        'meterReadingGas' => 'string',
        'meterReadingGasLastRead' => '\DateTime',
        'meterReadingElectricity' => 'string',
        'meterReadingElectricityLastRead' => '\DateTime',
        'meterReadingWater' => 'string',
        'meterReadingWaterLastRead' => '\DateTime',
        'typeId' => 'string',
        'negotiatorId' => 'string',
        'propertyId' => 'string',
        'applicantId' => 'string',
        'source' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20033Source',
        'related' => '\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20033Related[]',
        'fromArchive' => 'bool',
        'eTag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'links' => null,
        'embedded' => null,
        'id' => null,
        'created' => 'date-time',
        'modified' => 'date-time',
        'startDate' => 'date',
        'endDate' => 'date',
        'status' => null,
        'agentRole' => null,
        'rent' => 'int32',
        'rentFrequency' => null,
        'endDateConfirmed' => null,
        'isPeriodic' => null,
        'rentInstalmentsFrequency' => null,
        'rentInstalmentsAmount' => 'double',
        'rentInstalmentsStart' => 'date',
        'meterReadingGas' => null,
        'meterReadingGasLastRead' => 'date',
        'meterReadingElectricity' => null,
        'meterReadingElectricityLastRead' => 'date',
        'meterReadingWater' => null,
        'meterReadingWaterLastRead' => 'date',
        'typeId' => null,
        'negotiatorId' => null,
        'propertyId' => null,
        'applicantId' => null,
        'source' => null,
        'related' => null,
        'fromArchive' => null,
        'eTag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'embedded' => '_embedded',
        'id' => 'id',
        'created' => 'created',
        'modified' => 'modified',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'status' => 'status',
        'agentRole' => 'agentRole',
        'rent' => 'rent',
        'rentFrequency' => 'rentFrequency',
        'endDateConfirmed' => 'endDateConfirmed',
        'isPeriodic' => 'isPeriodic',
        'rentInstalmentsFrequency' => 'rentInstalmentsFrequency',
        'rentInstalmentsAmount' => 'rentInstalmentsAmount',
        'rentInstalmentsStart' => 'rentInstalmentsStart',
        'meterReadingGas' => 'meterReadingGas',
        'meterReadingGasLastRead' => 'meterReadingGasLastRead',
        'meterReadingElectricity' => 'meterReadingElectricity',
        'meterReadingElectricityLastRead' => 'meterReadingElectricityLastRead',
        'meterReadingWater' => 'meterReadingWater',
        'meterReadingWaterLastRead' => 'meterReadingWaterLastRead',
        'typeId' => 'typeId',
        'negotiatorId' => 'negotiatorId',
        'propertyId' => 'propertyId',
        'applicantId' => 'applicantId',
        'source' => 'source',
        'related' => 'related',
        'fromArchive' => 'fromArchive',
        'eTag' => '_eTag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'embedded' => 'setEmbedded',
        'id' => 'setId',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'status' => 'setStatus',
        'agentRole' => 'setAgentRole',
        'rent' => 'setRent',
        'rentFrequency' => 'setRentFrequency',
        'endDateConfirmed' => 'setEndDateConfirmed',
        'isPeriodic' => 'setIsPeriodic',
        'rentInstalmentsFrequency' => 'setRentInstalmentsFrequency',
        'rentInstalmentsAmount' => 'setRentInstalmentsAmount',
        'rentInstalmentsStart' => 'setRentInstalmentsStart',
        'meterReadingGas' => 'setMeterReadingGas',
        'meterReadingGasLastRead' => 'setMeterReadingGasLastRead',
        'meterReadingElectricity' => 'setMeterReadingElectricity',
        'meterReadingElectricityLastRead' => 'setMeterReadingElectricityLastRead',
        'meterReadingWater' => 'setMeterReadingWater',
        'meterReadingWaterLastRead' => 'setMeterReadingWaterLastRead',
        'typeId' => 'setTypeId',
        'negotiatorId' => 'setNegotiatorId',
        'propertyId' => 'setPropertyId',
        'applicantId' => 'setApplicantId',
        'source' => 'setSource',
        'related' => 'setRelated',
        'fromArchive' => 'setFromArchive',
        'eTag' => 'setETag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'embedded' => 'getEmbedded',
        'id' => 'getId',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'status' => 'getStatus',
        'agentRole' => 'getAgentRole',
        'rent' => 'getRent',
        'rentFrequency' => 'getRentFrequency',
        'endDateConfirmed' => 'getEndDateConfirmed',
        'isPeriodic' => 'getIsPeriodic',
        'rentInstalmentsFrequency' => 'getRentInstalmentsFrequency',
        'rentInstalmentsAmount' => 'getRentInstalmentsAmount',
        'rentInstalmentsStart' => 'getRentInstalmentsStart',
        'meterReadingGas' => 'getMeterReadingGas',
        'meterReadingGasLastRead' => 'getMeterReadingGasLastRead',
        'meterReadingElectricity' => 'getMeterReadingElectricity',
        'meterReadingElectricityLastRead' => 'getMeterReadingElectricityLastRead',
        'meterReadingWater' => 'getMeterReadingWater',
        'meterReadingWaterLastRead' => 'getMeterReadingWaterLastRead',
        'typeId' => 'getTypeId',
        'negotiatorId' => 'getNegotiatorId',
        'propertyId' => 'getPropertyId',
        'applicantId' => 'getApplicantId',
        'source' => 'getSource',
        'related' => 'getRelated',
        'fromArchive' => 'getFromArchive',
        'eTag' => 'getETag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = $data['links'] ?? null;
        $this->container['embedded'] = $data['embedded'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['modified'] = $data['modified'] ?? null;
        $this->container['startDate'] = $data['startDate'] ?? null;
        $this->container['endDate'] = $data['endDate'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['agentRole'] = $data['agentRole'] ?? null;
        $this->container['rent'] = $data['rent'] ?? null;
        $this->container['rentFrequency'] = $data['rentFrequency'] ?? null;
        $this->container['endDateConfirmed'] = $data['endDateConfirmed'] ?? null;
        $this->container['isPeriodic'] = $data['isPeriodic'] ?? null;
        $this->container['rentInstalmentsFrequency'] = $data['rentInstalmentsFrequency'] ?? null;
        $this->container['rentInstalmentsAmount'] = $data['rentInstalmentsAmount'] ?? null;
        $this->container['rentInstalmentsStart'] = $data['rentInstalmentsStart'] ?? null;
        $this->container['meterReadingGas'] = $data['meterReadingGas'] ?? null;
        $this->container['meterReadingGasLastRead'] = $data['meterReadingGasLastRead'] ?? null;
        $this->container['meterReadingElectricity'] = $data['meterReadingElectricity'] ?? null;
        $this->container['meterReadingElectricityLastRead'] = $data['meterReadingElectricityLastRead'] ?? null;
        $this->container['meterReadingWater'] = $data['meterReadingWater'] ?? null;
        $this->container['meterReadingWaterLastRead'] = $data['meterReadingWaterLastRead'] ?? null;
        $this->container['typeId'] = $data['typeId'] ?? null;
        $this->container['negotiatorId'] = $data['negotiatorId'] ?? null;
        $this->container['propertyId'] = $data['propertyId'] ?? null;
        $this->container['applicantId'] = $data['applicantId'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['related'] = $data['related'] ?? null;
        $this->container['fromArchive'] = $data['fromArchive'] ?? null;
        $this->container['eTag'] = $data['eTag'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,\NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse200Links>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets embedded
     *
     * @return array<string,object>|null
     */
    public function getEmbedded()
    {
        return $this->container['embedded'];
    }

    /**
     * Sets embedded
     *
     * @param array<string,object>|null $embedded embedded
     *
     * @return self
     */
    public function setEmbedded($embedded)
    {
        $this->container['embedded'] = $embedded;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier of the tenancy
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created The date and time when the tenancy was created
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified The date and time when the tenancy was last modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate startDate
     *
     * @return self
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate endDate
     *
     * @return self
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The current status of the tenancy (offerPending/offerWithdrawn/offerRejected/arranging/current/finished/cancelled)
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets agentRole
     *
     * @return string|null
     */
    public function getAgentRole()
    {
        return $this->container['agentRole'];
    }

    /**
     * Sets agentRole
     *
     * @param string|null $agentRole The role that the agent is performing for this tenancy (managed/rentCollection/collectFirstPayment/collectRentToDate/lettingOnly/introducingTenant)
     *
     * @return self
     */
    public function setAgentRole($agentRole)
    {
        $this->container['agentRole'] = $agentRole;

        return $this;
    }

    /**
     * Gets rent
     *
     * @return int|null
     */
    public function getRent()
    {
        return $this->container['rent'];
    }

    /**
     * Sets rent
     *
     * @param int|null $rent The amount of rent required, returned in relation to the collection frequency
     *
     * @return self
     */
    public function setRent($rent)
    {
        $this->container['rent'] = $rent;

        return $this;
    }

    /**
     * Gets rentFrequency
     *
     * @return string|null
     */
    public function getRentFrequency()
    {
        return $this->container['rentFrequency'];
    }

    /**
     * Sets rentFrequency
     *
     * @param string|null $rentFrequency The rent collection frequency (weekly/monthly/annually)
     *
     * @return self
     */
    public function setRentFrequency($rentFrequency)
    {
        $this->container['rentFrequency'] = $rentFrequency;

        return $this;
    }

    /**
     * Gets endDateConfirmed
     *
     * @return bool|null
     */
    public function getEndDateConfirmed()
    {
        return $this->container['endDateConfirmed'];
    }

    /**
     * Sets endDateConfirmed
     *
     * @param bool|null $endDateConfirmed A flag determining whether or not the tenancy is confirmed to finish at the end date
     *
     * @return self
     */
    public function setEndDateConfirmed($endDateConfirmed)
    {
        $this->container['endDateConfirmed'] = $endDateConfirmed;

        return $this;
    }

    /**
     * Gets isPeriodic
     *
     * @return bool|null
     */
    public function getIsPeriodic()
    {
        return $this->container['isPeriodic'];
    }

    /**
     * Sets isPeriodic
     *
     * @param bool|null $isPeriodic A flag determining whether or not the tenancy has been extended indefinitely
     *
     * @return self
     */
    public function setIsPeriodic($isPeriodic)
    {
        $this->container['isPeriodic'] = $isPeriodic;

        return $this;
    }

    /**
     * Gets rentInstalmentsFrequency
     *
     * @return string|null
     */
    public function getRentInstalmentsFrequency()
    {
        return $this->container['rentInstalmentsFrequency'];
    }

    /**
     * Sets rentInstalmentsFrequency
     *
     * @param string|null $rentInstalmentsFrequency The frequency of rental instalment payments (weekly/fortnightly/monthly/quarterly/halfYearly/yearly/every28Days/other)
     *
     * @return self
     */
    public function setRentInstalmentsFrequency($rentInstalmentsFrequency)
    {
        $this->container['rentInstalmentsFrequency'] = $rentInstalmentsFrequency;

        return $this;
    }

    /**
     * Gets rentInstalmentsAmount
     *
     * @return double|null
     */
    public function getRentInstalmentsAmount()
    {
        return $this->container['rentInstalmentsAmount'];
    }

    /**
     * Sets rentInstalmentsAmount
     *
     * @param double|null $rentInstalmentsAmount The amount due for each rent instalment (where specified)
     *
     * @return self
     */
    public function setRentInstalmentsAmount($rentInstalmentsAmount)
    {
        $this->container['rentInstalmentsAmount'] = $rentInstalmentsAmount;

        return $this;
    }

    /**
     * Gets rentInstalmentsStart
     *
     * @return \DateTime|null
     */
    public function getRentInstalmentsStart()
    {
        return $this->container['rentInstalmentsStart'];
    }

    /**
     * Sets rentInstalmentsStart
     *
     * @param \DateTime|null $rentInstalmentsStart The date that the first instalment is due
     *
     * @return self
     */
    public function setRentInstalmentsStart($rentInstalmentsStart)
    {
        $this->container['rentInstalmentsStart'] = $rentInstalmentsStart;

        return $this;
    }

    /**
     * Gets meterReadingGas
     *
     * @return string|null
     */
    public function getMeterReadingGas()
    {
        return $this->container['meterReadingGas'];
    }

    /**
     * Sets meterReadingGas
     *
     * @param string|null $meterReadingGas The recorded utility reading for the gas meter
     *
     * @return self
     */
    public function setMeterReadingGas($meterReadingGas)
    {
        $this->container['meterReadingGas'] = $meterReadingGas;

        return $this;
    }

    /**
     * Gets meterReadingGasLastRead
     *
     * @return \DateTime|null
     */
    public function getMeterReadingGasLastRead()
    {
        return $this->container['meterReadingGasLastRead'];
    }

    /**
     * Sets meterReadingGasLastRead
     *
     * @param \DateTime|null $meterReadingGasLastRead Date of when the reading of gas utility was last recorded
     *
     * @return self
     */
    public function setMeterReadingGasLastRead($meterReadingGasLastRead)
    {
        $this->container['meterReadingGasLastRead'] = $meterReadingGasLastRead;

        return $this;
    }

    /**
     * Gets meterReadingElectricity
     *
     * @return string|null
     */
    public function getMeterReadingElectricity()
    {
        return $this->container['meterReadingElectricity'];
    }

    /**
     * Sets meterReadingElectricity
     *
     * @param string|null $meterReadingElectricity The recorded utility reading for the electricity meter
     *
     * @return self
     */
    public function setMeterReadingElectricity($meterReadingElectricity)
    {
        $this->container['meterReadingElectricity'] = $meterReadingElectricity;

        return $this;
    }

    /**
     * Gets meterReadingElectricityLastRead
     *
     * @return \DateTime|null
     */
    public function getMeterReadingElectricityLastRead()
    {
        return $this->container['meterReadingElectricityLastRead'];
    }

    /**
     * Sets meterReadingElectricityLastRead
     *
     * @param \DateTime|null $meterReadingElectricityLastRead Date of when the reading of electricity utility was last recorded
     *
     * @return self
     */
    public function setMeterReadingElectricityLastRead($meterReadingElectricityLastRead)
    {
        $this->container['meterReadingElectricityLastRead'] = $meterReadingElectricityLastRead;

        return $this;
    }

    /**
     * Gets meterReadingWater
     *
     * @return string|null
     */
    public function getMeterReadingWater()
    {
        return $this->container['meterReadingWater'];
    }

    /**
     * Sets meterReadingWater
     *
     * @param string|null $meterReadingWater The recorded utility reading for the water meter
     *
     * @return self
     */
    public function setMeterReadingWater($meterReadingWater)
    {
        $this->container['meterReadingWater'] = $meterReadingWater;

        return $this;
    }

    /**
     * Gets meterReadingWaterLastRead
     *
     * @return \DateTime|null
     */
    public function getMeterReadingWaterLastRead()
    {
        return $this->container['meterReadingWaterLastRead'];
    }

    /**
     * Sets meterReadingWaterLastRead
     *
     * @param \DateTime|null $meterReadingWaterLastRead Date of when the reading of water utility was last recorded
     *
     * @return self
     */
    public function setMeterReadingWaterLastRead($meterReadingWaterLastRead)
    {
        $this->container['meterReadingWaterLastRead'] = $meterReadingWaterLastRead;

        return $this;
    }

    /**
     * Gets typeId
     *
     * @return string|null
     */
    public function getTypeId()
    {
        return $this->container['typeId'];
    }

    /**
     * Sets typeId
     *
     * @param string|null $typeId The unique identifier of the type of tenancy
     *
     * @return self
     */
    public function setTypeId($typeId)
    {
        $this->container['typeId'] = $typeId;

        return $this;
    }

    /**
     * Gets negotiatorId
     *
     * @return string|null
     */
    public function getNegotiatorId()
    {
        return $this->container['negotiatorId'];
    }

    /**
     * Sets negotiatorId
     *
     * @param string|null $negotiatorId The unique identifier of the negotiator who is managing the tenancy
     *
     * @return self
     */
    public function setNegotiatorId($negotiatorId)
    {
        $this->container['negotiatorId'] = $negotiatorId;

        return $this;
    }

    /**
     * Gets propertyId
     *
     * @return string|null
     */
    public function getPropertyId()
    {
        return $this->container['propertyId'];
    }

    /**
     * Sets propertyId
     *
     * @param string|null $propertyId The unique identifier of the property that relates to the tenancy
     *
     * @return self
     */
    public function setPropertyId($propertyId)
    {
        $this->container['propertyId'] = $propertyId;

        return $this;
    }

    /**
     * Gets applicantId
     *
     * @return string|null
     */
    public function getApplicantId()
    {
        return $this->container['applicantId'];
    }

    /**
     * Sets applicantId
     *
     * @param string|null $applicantId The unique identifier of the applicant who has applied to be a tenant
     *
     * @return self
     */
    public function setApplicantId($applicantId)
    {
        $this->container['applicantId'] = $applicantId;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20033Source|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20033Source|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets related
     *
     * @return \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20033Related[]|null
     */
    public function getRelated()
    {
        return $this->container['related'];
    }

    /**
     * Sets related
     *
     * @param \NorthernEstateAgencies\ReapitFoundationsClient\Model\InlineResponse20033Related[]|null $related A collection of contact / company tenants associated to the tenancy. The first item in the collection is considered the primary relationship
     *
     * @return self
     */
    public function setRelated($related)
    {
        $this->container['related'] = $related;

        return $this;
    }

    /**
     * Gets fromArchive
     *
     * @return bool|null
     */
    public function getFromArchive()
    {
        return $this->container['fromArchive'];
    }

    /**
     * Sets fromArchive
     *
     * @param bool|null $fromArchive A flag denoting whether or not this tenancy is archived
     *
     * @return self
     */
    public function setFromArchive($fromArchive)
    {
        $this->container['fromArchive'] = $fromArchive;

        return $this;
    }

    /**
     * Gets eTag
     *
     * @return string|null
     */
    public function getETag()
    {
        return $this->container['eTag'];
    }

    /**
     * Sets eTag
     *
     * @param string|null $eTag The ETag for the current version of the tenancy. Used for managing update concurrency
     *
     * @return self
     */
    public function setETag($eTag)
    {
        $this->container['eTag'] = $eTag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


