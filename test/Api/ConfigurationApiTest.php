<?php
/**
 * ConfigurationApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foundations Interactive API Explorer
 *
 * <p>Technical documentation for the Reapit Foundations REST API endpoints. This tool is interactive and provides instant access to data hosted in our <strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation#sandbox-mode\">sandbox environment</a> </strong>with <strong>authentication</strong> and <strong>versioning</strong> headers pre-populated. Example requests and responses are shown by default but you can switch to view a fully documented schema - look for the&nbsp;<strong>model</strong> link.</p> <p>* To begin developing with the platform, consult our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/api/api-documentation\">documentation</a></strong>&nbsp;<br />* To report a bug or request a new feature, see our <strong><a href=\"https://developers.reapit.cloud/help\">help pages</a>&nbsp;<br /></strong>* For information on terminology, see our&nbsp;<strong><a href=\"https://foundations-documentation.reapit.cloud/platform-glossary\">glossary</a></strong>&nbsp;<br />* Our APIs are located at&nbsp;<strong>https://platform.reapit.cloud<br /></strong>* The current API version is&nbsp;<strong>2020-01-31<br /></strong></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ConfigurationApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConfigurationApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for configurationAppointmentTypesGet
     *
     * Gets the full listing of appointment types.
     *
     */
    public function testConfigurationAppointmentTypesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationAppointmentTypesIdGet
     *
     * Gets a single appointment type.
     *
     */
    public function testConfigurationAppointmentTypesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationBoardStatusesGet
     *
     * Gets the full listing of board statuses.
     *
     */
    public function testConfigurationBoardStatusesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationBoardStatusesIdGet
     *
     * Gets a single board status.
     *
     */
    public function testConfigurationBoardStatusesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationCertificateTypesGet
     *
     * Gets the full listing of certificate types.
     *
     */
    public function testConfigurationCertificateTypesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationCertificateTypesIdGet
     *
     * Gets a single certificate type.
     *
     */
    public function testConfigurationCertificateTypesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationCompanyTypesGet
     *
     * Gets the full listing of company types.
     *
     */
    public function testConfigurationCompanyTypesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationCompanyTypesIdGet
     *
     * Gets a single company type.
     *
     */
    public function testConfigurationCompanyTypesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationDocumentTypesGet
     *
     * Gets the full listing of document types.
     *
     */
    public function testConfigurationDocumentTypesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationDocumentTypesIdGet
     *
     * Gets a single document type.
     *
     */
    public function testConfigurationDocumentTypesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationFollowUpResponsesGet
     *
     * Gets the full listing of pre-defined appointment follow up feedback responses.
     *
     */
    public function testConfigurationFollowUpResponsesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationFollowUpResponsesIdGet
     *
     * Gets a single pre-defined appointment follow up feedback response.
     *
     */
    public function testConfigurationFollowUpResponsesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationIdentityDocumentTypesGet
     *
     * Gets the full listing of ID document types.
     *
     */
    public function testConfigurationIdentityDocumentTypesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationIdentityDocumentTypesIdGet
     *
     * Gets a single ID document type.
     *
     */
    public function testConfigurationIdentityDocumentTypesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationJournalEntryTypesGet
     *
     * Gets the full listing of journal entry types.
     *
     */
    public function testConfigurationJournalEntryTypesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationJournalEntryTypesIdGet
     *
     * Gets a single journal entry type.
     *
     */
    public function testConfigurationJournalEntryTypesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationSellingReasonsGet
     *
     * Gets the full listing of vendor selling reasons.
     *
     */
    public function testConfigurationSellingReasonsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationSellingReasonsIdGet
     *
     * Gets a single vendor selling reason.
     *
     */
    public function testConfigurationSellingReasonsIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationSupplierTypesGet
     *
     * Gets the full listing of supplier types.
     *
     */
    public function testConfigurationSupplierTypesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationSupplierTypesIdGet
     *
     * Gets a single supplier type.
     *
     */
    public function testConfigurationSupplierTypesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationTaskTypesGet
     *
     * Gets the full listing of task types.
     *
     */
    public function testConfigurationTaskTypesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationTaskTypesIdGet
     *
     * Gets a single task type.
     *
     */
    public function testConfigurationTaskTypesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationTenancyTypesGet
     *
     * Gets the full listing of tenancy types.
     *
     */
    public function testConfigurationTenancyTypesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationTenancyTypesIdGet
     *
     * Gets a single tenancy type.
     *
     */
    public function testConfigurationTenancyTypesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationVendorTypesGet
     *
     * Gets the full listing of vendor types.
     *
     */
    public function testConfigurationVendorTypesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationVendorTypesIdGet
     *
     * Gets a single vendor type.
     *
     */
    public function testConfigurationVendorTypesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationWorksOrderTypesGet
     *
     * Gets the full listing of work order types.
     *
     */
    public function testConfigurationWorksOrderTypesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationWorksOrderTypesIdGet
     *
     * Gets a single work order type.
     *
     */
    public function testConfigurationWorksOrderTypesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
